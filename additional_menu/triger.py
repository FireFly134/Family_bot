# coding=UTF-8
import pandas as pd

from datetime import datetime
from time import sleep

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from free_time import free_time

def eat(update, context, user_triger):
    if update.effective_chat.id in user_triger:
        user_triger.pop(update.effective_chat.id)
    reply_keyboard = [['–ü—Ä–æ–¥—É–∫—Ç', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ß–∞—Å—Ç–æ—Ç–∞'],['–ë–ª—é–¥–æ']] #, '–ß–∞—Å—Ç–æ—Ç–∞'],['–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'],
    if update.effective_chat.id == 232749605 or update.effective_chat.id == 943180118:
        reply_keyboard += [['–°–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏', '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    else:
        reply_keyboard += [['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    sms = "–¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π '–ü—Ä–æ–¥—É–∫—Ç', '–ö–∞—Ç–µ–≥–æ—Ä–∏—é' –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
    context.bot.send_message(chat_id=update.effective_chat.id, text=sms,
                             reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                              one_time_keyboard=False))
def products(update, context, user_triger):
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç', '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'], ['–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–ï–î–ê"']]
    user_triger[update.effective_chat.id] = {
        'triger': "products",
        'New': False,
        'Delete': False,
        'Edit_link': False,
        'step': 0,
        'categories': 'None',
        'choice': 'None',
        'name': 'None',
        'link': 'None'
    }
    sms = "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"
    context.bot.send_message(chat_id=update.effective_chat.id, text=sms,
                             reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                              one_time_keyboard=False))
def categories (update, context, user_triger):
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–ï–î–ê"']]
    user_triger[update.effective_chat.id] = {
        'triger': "categories",
        'New': False,
        'Delete': False
    }
    sms = "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    context.bot.send_message(chat_id=update.effective_chat.id, text=sms,
                             reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                              one_time_keyboard=False))
def frequency (update, context, user_triger):
    reply_keyboard = [['–ò–∑–º–µ–Ω–∏—Ç—å', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–ï–î–ê"']]
    user_triger[update.effective_chat.id] = {
        'triger': "frequency",
        'Edit': False,
        'edit_products': False,
        'categories': 'None',
        'name': 'None',
        'step': 0
    }
    sms = "–¢—É—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
    context.bot.send_message(chat_id=update.effective_chat.id, text=sms,
                             reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                              one_time_keyboard=False))
def dish(update, context, user_triger):
    reply_keyboard = [['–°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä –¥–ª—è –±–ª—é–¥–∞', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä –¥–ª—è –±–ª—é–¥–∞', '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–æ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É'], ["–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç"], ["–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", "–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç"],['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–ï–î–ê"']]
    user_triger[update.effective_chat.id] = {
        'triger': "dish",
        'create': False,
        'add_note': False,
        'show_note': False,
        'show_product': False,
        'delete': 'None',
        'name': 'None',
        'num_need_people': 1,
        'coocing_time': 0,
        'step': 0,
        'list_products': []
    }
    sms = "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑. –¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–ª—é–¥–æ –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è."
    context.bot.send_message(chat_id=update.effective_chat.id, text=sms,
                             reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                              one_time_keyboard=False))

def handle_text(update, context, user_triger, engine, start, user, logging, name_kids, papa, mama):
    triger = user_triger[update.effective_chat.id]["triger"]
    if triger == "reg":
        if "–∞–Ω–¥—Ä–µ–π" == update.message.text.lower():
            name = "–ê–Ω–¥—Ä–µ–π"
        elif "–∞–º–∏—Ä–∞" == update.message.text.lower():
            name = "–ê–º–∏—Ä–∞"
        elif "–ª–∏–∑–∞" == update.message.text.lower():
            name = "–õ–∏–∑–∞"
        elif "–ª–µ–π–ª–∞" == update.message.text.lower():
            name = "–õ–µ–π–ª–∞"
        elif "–≤–æ–≤–∞" == update.message.text.lower():
            name = "–í–æ–≤–∞"
        elif "–∏–Ω–Ω–∞" == update.message.text.lower():
            name = "–ò–Ω–Ω–∞"
        elif "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω" == update.message.text.lower():
            name = "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω"
        elif "–≤–∞–ª—è" == update.message.text.lower():
            name = "–ë–∞–±—É—à–∫–∞ –í–∞–ª—è"
        elif "–¥–∏–º–∞" == update.message.text.lower():
            name = "–î–µ–¥—É—à–∫–∞ –î–∏–º–∞"
        elif "–ª—é–¥–º–∏–ª–∞" == update.message.text.lower():
            name = "–ë–∞–±—É—à–∫–∞ –õ—é–¥–º–∏–ª–∞"
        search_result = engine.execute(f"SELECT name,access FROM user_family WHERE name = '{name}';").fetchall()
        if len(search_result) != 0:
            engine.execute("UPDATE user_family SET user_id = " + str(update.effective_chat.id) + " WHERE name = '" + name+"';")
            user_triger.pop(update.effective_chat.id)
            context.bot.send_message(chat_id=update.effective_chat.id, text="–û–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ, —Å—Ä–∞–∑—É –Ω–µ —É–∑–Ω–∞–ª! –¢–∞–∫–æ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è. üòÅ")
            start(update,context)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üòÅ")
    #–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –µ–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç -"–ù–ï–¢" —Ç–æ —Å–ª—É–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—á–µ–º—É –Ω–µ—Ç? –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—é–¥–∞, –∂–¥–µ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ.
    elif triger == "comment":
        engine.execute(f"UPDATE user_family SET comment = '{update.message.text}' WHERE user_id = '{update.effective_chat.id}';")
        context.bot.send_message(chat_id=update.effective_chat.id, text="–°–ø–∞—Å–∏–±–æ.üòä")
        context.bot.send_message(chat_id=papa, text=user_triger[update.effective_chat.id]["name"] + "(–û—Ç–≤–µ—Ç –ù–ï–¢)")
        user_triger.pop(update.effective_chat.id)
    # –¢—Ä–∏–≥–µ—Ä "—è —Ö–æ—á—É –ø–æ—Ö–≤–∞–ª—É" —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç —á–µ–º —Ä–µ–±–µ–Ω–æ–∫ —Ö–æ—á–µ—Ç –ø–æ—Ö–≤–∞–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏
    elif triger == "i_want_praise":
        if '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower():
            user_triger.pop(update.effective_chat.id)
            user(update,context,'—Ö–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞.')
            logging.info('"—Ö–æ—á—É –ø–æ—Ö–≤–∞–ª—É", –æ—Ç–º–µ–Ω–∞.')
        elif '—Ö–æ—á—É –ø–æ—Ö–≤–∞–ª—É' == update.message.text.lower():# –ù–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–æ –±—ã–ª–æ –¥–µ–ª–æ —á—Ç–æ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–∏—Å–∞–ª–æ—Å—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Å–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á–µ–º —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏—Ö–æ–¥–∏–ª–æ —ç—Ç–æ...'—Ö–æ—á—É –ø–æ—Ö–≤–∞–ª—É'
            context.bot.send_message(chat_id=update.effective_chat.id, text="–î–∞-–¥–∞, —è –ø–æ–Ω—è–ª... –ù–∞–ø–∏—à–∏ –æ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —è —ç—Ç–æ –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è–º :)")
        else:
            info = pd.read_sql_query(f"SELECT name FROM user_family WHERE user_id = '{update.effective_chat.id}';",engine)
            name = str(info.loc[0, 'name'])
            if user_triger[update.effective_chat.id]["skill"]:
                yes = 'IQ_Yes'
                smile = 'üí°'
                mark = 'IQ'
                logging.info("—Ö–æ—á—É –ø–æ—Ö–≤–∞–ª—É –∑–∞ –°–ö–ò–õ–õ " + name + ':\n"' + str(update.message.text) + '"')
            else:
                yes = 'yes'
                smile = 'üëç'
                mark = 'mark'
                logging.info("—Ö–æ—á—É –ø–æ—Ö–≤–∞–ª—É " + name + ':\n"' + str(update.message.text) + '"')
            engine.execute(f"INSERT INTO msg_list(name, msg_text, date, user_id, kids) VALUES('{name}','{str(update.message.text)}','{str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}','{str(update.effective_chat.id)}','{yes}');")
            keyboard = []
            for i in range(1, 6):
                keyboard += [InlineKeyboardButton(f'{i}{smile}', callback_data=f'{mark}-{name}-{i}')]
            context.bot.send_message(chat_id=papa, text=name +':\n"'+str(update.message.text)+'"', reply_markup=InlineKeyboardMarkup([keyboard]))
            context.bot.send_message(chat_id=mama, text=name +':\n"'+str(update.message.text)+'"', reply_markup=InlineKeyboardMarkup([keyboard]))
            recipient = pd.read_sql_query(f"SELECT name, user_id FROM user_family WHERE access = '2';", engine)
            for i in range(len(recipient)):
                try:
                    context.bot.send_message(chat_id=int(recipient.loc[i, 'user_id']), text= name + ':\n"' + str(update.message.text) + '"')
                except Exception:
                    logging.error(f"{recipient.loc[i, 'name']} –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º—Å '—Ö–æ—á—É –ø–æ—Ö–≤–∞–ª—É'")
            user_triger.pop(update.effective_chat.id)
            user(update, context, '–û—Ç–ø—Ä–∞–≤–∏–ª!')
            logging.info('–†–æ–¥–∏—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–∏–ª!')
            sleep(2)
            context.bot.send_message(chat_id=update.effective_chat.id, text="–†–æ–¥–∏—Ç–µ–ª–∏ –æ—á–µ–Ω—å –∑–∞–Ω—è—Ç—ã, –Ω–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —ç—Ç—É –∂–µ —Å–µ–∫—É–Ω–¥—É. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –∏–º –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –∑–∞–±—ã–ª–∏ —Ç–µ–±—è –ø–æ—Ö–≤–∞–ª–∏—Ç—å))")
    elif triger == "problem":
        if '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower():
            user_triger.pop(update.effective_chat.id)
            user(update, context, '—Ö–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞.')
            logging.info('"—Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", –æ—Ç–º–µ–Ω–∞.')
        elif '—Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ' == update.message.text.lower():
            context.bot.send_message(chat_id=update.effective_chat.id, text="–î–∞-–¥–∞, —è –ø–æ–Ω—è–ª... –û–ø–∏—à–∏—Ç–µ, –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞.")
        else:
            info = pd.read_sql_query(f"SELECT name FROM user_family WHERE user_id = '{update.effective_chat.id}';",engine)
            name = str(info.loc[0, 'name'])
            engine.execute("INSERT INTO msg_list_work(name, msg_text, date, user_id, make) VALUES('" + name + "','" + str(update.message.text) + "','" + str(datetime.now().strftime('%Y-%m-%d %H:%M:%S')) + "','" + str(update.effective_chat.id) + "','0');")
            context.bot.send_message(chat_id=462169878, text="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ! "+ name + ':\n"' + str(update.message.text) + '"')
            logging.info("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ! " + name + ':\n"' + str(update.message.text) + '"')
            user_triger.pop(update.effective_chat.id)
            user(update, context, '–û—Ç–ø—Ä–∞–≤–∏–ª!')
            logging.info("–í–æ–≤–µ –æ—Ç–ø—Ä–∞–≤–∏–ª!")
###################################################################################################################
###################################################################################################################
###################################################################################################################
    # –†–æ–¥–∏—Ç–µ–ª–∏ –ø–∏—à—É—Ç —Å–∞–º–∏ –æ —É—Å–ø–µ—Ö–µ —Ä–µ–±–µ–Ω–∫–∞(–æ—Å–≤–æ–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ "—Å–∫–∏–ª–∞") –∏–ª–∏ –Ω–∞ –æ–±–æ—Ä–æ—Ç –∏ –≤—Ä—É—á–∞—é—Ç –∑–∞ —ç—Ç–æ –æ—Ü–µ–Ω–∫—É (–ª–∞–π–∫, –¥–∏–∑–ª–∞–π–∫ –∏–ª–∏ IQ)
    elif triger == "assess":
        if user_triger[update.effective_chat.id]["name"] == "None" and '–æ—Ç–º–µ–Ω–∏—Ç—å' != update.message.text.lower():
            kids_name = ""
            if '–∞–º–∏—Ä–∞' == update.message.text.lower() or '–∞–º–∏—Ä—É' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                kids_name = "–ê–º–∏—Ä–∞"
            elif '–ª–∏–∑–∞' == update.message.text.lower() or '–ª–∏–∑—É' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                kids_name = "–õ–∏–∑–∞"
            elif '–ª–µ–π–ª–∞' == update.message.text.lower() or '–ª–µ–π–ª—É' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                kids_name = "–õ–µ–π–ª–∞"
            elif '–≤–æ–≤–∞' == update.message.text.lower() or '–≤–æ–≤—É' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                kids_name = "–í–æ–≤–∞"
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –¥–µ—Ç–µ–π. –í—ã–±–∏—Ä–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–±–µ–Ω–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\".")
            if kids_name != "":
                user_triger[update.effective_chat.id]["name"] = kids_name
                if user_triger[update.effective_chat.id]["skill"]:
                    user_triger[update.effective_chat.id]["choice"] = "IQ"
                    if user_triger[update.effective_chat.id]["name"] != "–í–æ–≤–∞":
                        a = 'a'
                    else:
                        a = ''
                    sms = f"–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –Ω–æ–≤—ã–π 'skill' –æ—Å–≤–æ–∏–ª{a} {user_triger[update.effective_chat.id]['name']}?"
                    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
                else:
                    reply_keyboard = [['–õ–∞–π–∫üëç', '–î–∏–∑–ª–∞–π–∫üëé'], ['–û—Ç–º–µ–Ω–∏—Ç—å']]
                    sms = "–ß—Ç–æ —Å—Ç–∞–≤–∏–º? –õ–∞–π–∫–∏ –∏–ª–∏ –î–∏–∑–ª–∞–π–∫–∏?"
                context.bot.send_message(chat_id=update.effective_chat.id, text=sms,reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,one_time_keyboard=False))
        elif user_triger[update.effective_chat.id]["choice"] == "None" and '–æ—Ç–º–µ–Ω–∏—Ç—å' != update.message.text.lower():
            choice = ""
            if '–ª–∞–π–∫üëç' == update.message.text.lower() or '–ª–∞–π–∫' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                choice = "–ª–∞–π–∫"
            elif '–¥–∏–∑–ª–∞–π–∫üëé' == update.message.text.lower() or '–¥–∏–∑–ª–∞–π–∫' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                choice = "–¥–∏–∑–ª–∞–π–∫"
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø —Ç–∞–∫—É—é –µ–¥–∏–Ω–∏—Ü—É –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–µ –∑–Ω–∞—é. –í—ã–±–∏—Ä–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ \"–õ–∞–π–∫üëç\" –∏–ª–∏ \"–î–∏–∑–ª–∞–π–∫üëé\", –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\".")
            if choice != "":
                user_triger[update.effective_chat.id]["choice"] = choice
                if user_triger[update.effective_chat.id]["name"] != "–í–æ–≤–∞":
                    a = 'a'
                    b = '–∞—Å—å'
                else:
                    a = ''
                    b = '—Å—è'
                if choice == "–ª–∞–π–∫":
                    sms = f"–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–æ–≤–µ—Ä—à–∏–ª{a} {user_triger[update.effective_chat.id]['name']}."
                else:
                    sms = f"–û–ø–∏—à–∏—Ç–µ, –≤ —á–µ–º –ø—Ä–æ–≤–∏–Ω–∏–ª{b} {user_triger[update.effective_chat.id]['name']}."
                reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
                context.bot.send_message(chat_id=update.effective_chat.id,text=sms,reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,one_time_keyboard=False))
        elif user_triger[update.effective_chat.id]["text"] == "None" and '–æ—Ç–º–µ–Ω–∏—Ç—å' != update.message.text.lower():
            name = user_triger[update.effective_chat.id]["name"]
            choice = user_triger[update.effective_chat.id]["choice"]
            user_triger[update.effective_chat.id]["text"] = text = update.message.text
            info = pd.read_sql_query(f"SELECT user_id FROM user_family WHERE name = '{name}';", engine)
            if choice == "IQ":
                kid = 'IQ'
            else:
                kid = 'no'
            engine.execute(f"INSERT INTO msg_list(name, msg_text, date, user_id, kids) VALUES('{name}','{str(update.message.text)}','{str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}','{str(info.loc[0, 'user_id'])}','{kid}')")
            if choice == "–ª–∞–π–∫":
                smile = 'üëç'
                mark = 'mark'
            elif choice == "IQ":
                smile = 'üí°'
                mark = 'IQ'
            else:
                smile = 'üëé'
                mark = 'antimark'
            keyboard = []
            for i in range(1, 6):
                keyboard += [InlineKeyboardButton(f'{i}{smile}', callback_data=f'{mark}-{name}-{i}')]
            context.bot.send_message(chat_id=papa, text=name + ':\n"' + str(update.message.text) + '"',reply_markup=InlineKeyboardMarkup([keyboard]))
            context.bot.send_message(chat_id=mama, text=name + ':\n"' + str(update.message.text) + '"',reply_markup=InlineKeyboardMarkup([keyboard]))
            if update.effective_chat.id == papa:
                kto = "–ü–∞–ø–∞:\n"
            elif update.effective_chat.id == mama:
                kto = "–ú–∞–º–∞:\n"
            logging.info(kto+"-"+name + ':"' + str(update.message.text)+'"')
            context.bot.send_message(chat_id=int(info.loc[0, "user_id"]), text=kto + str(update.message.text))
            user_triger.pop(update.effective_chat.id)
        elif '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower():
            user(update, context, '—Ö–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞.')
###################################################################################################################
###################################################################################################################
###################################################################################################################
    elif triger == "book":
        if '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower():
            user(update, context, '—Ö–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞.')
        else:
            id = user_triger[update.effective_chat.id]["id"]
            every_day_page = user_triger[update.effective_chat.id]["every_day_page"]
            old_page = user_triger[update.effective_chat.id]["old_page"]
            all_page = user_triger[update.effective_chat.id]["all_page"]
            if update.message.text.isnumeric():
                if all_page > int(update.message.text):
                    if old_page < int(update.message.text):
                        new_page = int(update.message.text)
                        engine.execute(f"UPDATE books SET new_page = {new_page} WHERE id = {id};")
                        result = new_page - old_page
                        if every_day_page <= result:
                            text = "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü - " + str(result)
                        else:
                            text = "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü - " + str(result)

                    else:
                        text = "—á—Ç–æ-—Ç–æ —Ç—É—Ç –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è... –±—ã–ª–æ –∂–µ " + str(old_page)+"!"
                elif all_page == int(update.message.text):
                    text = "–û–≥–æ, —É–∂–µ –≤—Å—ë? –í–æ—Ç –¥–µ—Ä–∂–∏! +üìï –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üôÇ"
                    info = pd.read_sql(f"SELECT name, books_end FROM user_family WHERE user_id = '{update.effective_chat.id}';",engine)
                    books_end = int(info.loc[0,"books_end"]) +1
                    engine.execute(f"UPDATE books SET user_id = '0', status = '–ø—Ä–æ—á–∏—Ç–∞–Ω–æ', new_page = '{int(update.message.text)}' WHERE id = '{id}';")#name = '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ({info.loc[0,'name']})'
                    engine.execute(f"UPDATE user_family SET books_end = {books_end} WHERE user_id = '{update.effective_chat.id}';")
                    print(f"UPDATE user_family SET books_end = {books_end} WHERE user_id = '{update.effective_chat.id}';")
                    context.bot.send_message(chat_id=papa,text=f"{info.loc[0,'name']} +üìï –∑–∞ –ø—Ä–æ—á—Ç—ë–Ω–Ω—É—é –∫–Ω–∏–≥—É.")
                    context.bot.send_message(chat_id=mama, text=f"{info.loc[0, 'name']} +üìï –∑–∞ –ø—Ä–æ—á—Ç—ë–Ω–Ω—É—é –∫–Ω–∏–≥—É.")
                else:
                    text = "—á—Ç–æ-—Ç–æ —Ç—É—Ç –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è... –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∂–µ " + str(all_page) + "!"
                user_triger.pop(update.effective_chat.id)
                user(update,context,text)
            else:
                context.bot.send_message(chat_id=update.effective_chat.id,text="–ú–Ω–µ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ü–∏—Ñ—Ä–∞–º–∏.")
    elif triger == "add_book":
        if '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower():
            user(update, context, '—Ö–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞.')
        elif '–¥–∞' == update.message.text.lower() or '–¥–∞, –¥–æ–±–∞–≤–∏—Ç—å' == update.message.text.lower():
            name = name_kids[update.effective_chat.id]
            engine.execute(f"INSERT INTO books(name, book_name, writer, all_page, user_id) "
                           f"VALUES('{name}',"
                                  f"'{user_triger[update.effective_chat.id]['name_book']}',"
                                  f"'{user_triger[update.effective_chat.id]['name_writer']}',"
                                  f"'{user_triger[update.effective_chat.id]['all_page']}',"
                                  f"'{update.effective_chat.id}');")
            info = pd.read_sql_query(f"SELECT id FROM books WHERE  name = '{name}' AND writer = '{user_triger[update.effective_chat.id]['name_writer']}' AND book_name = '{user_triger[update.effective_chat.id]['name_book']}';",engine)
            text = f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞ –¥–ª—è {str(name)[:len(str(name)) - 1]}—ã:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ - \"{user_triger[update.effective_chat.id]['name_book']}\"\n–ê–≤—Ç–æ—Ä - \"{user_triger[update.effective_chat.id]['name_writer']}\"\n–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–Ω–∏–≥–µ = {user_triger[update.effective_chat.id]['all_page']}\n"
            logging.info(text)
            keyboard = [[InlineKeyboardButton(f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –¥–ª—è {str(name)[:len(name)-1]}—ã', callback_data='add_book-' + str(info.loc[0,'id']))]]
            context.bot.send_message(chat_id=papa, text=text, reply_markup=InlineKeyboardMarkup(keyboard))
            user(update, context, "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è!")
            logging.info(text+"\n–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è! –ò –ø–æ—à–ª–æ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        else:
            user_msg = update.message.text
            if user_triger[update.effective_chat.id]["name_book"] == "None":
                user_triger[update.effective_chat.id]["name_book"] = str(user_msg)
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ö—Ç–æ –∞–≤—Ç–æ—Ä —ç—Ç–æ–π –∫–Ω–∏–≥–∏?")
            elif user_triger[update.effective_chat.id]["name_writer"] == "None":
                user_triger[update.effective_chat.id]["name_writer"] = str(user_msg)
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ò –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —ç—Ç–æ–π –∫–Ω–∏–≥–µ?")
            elif user_triger[update.effective_chat.id]["all_page"] == "None":
                if user_msg.isnumeric():
                    if int(user_msg) > 0:
                        user_triger[update.effective_chat.id]["all_page"] = user_msg
                        reply_keyboard = [['–î–∞, –¥–æ–±–∞–≤–∏—Ç—å','–û—Ç–º–µ–Ω–∏—Ç—å']]
                        context.bot.send_message(chat_id=update.effective_chat.id, text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ - "{user_triger[update.effective_chat.id]["name_book"]}"\n'
                                                                                        f'–ê–≤—Ç–æ—Ä - "{user_triger[update.effective_chat.id]["name_writer"]}"\n'
                                                                                        f'–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–Ω–∏–≥–µ = {user_triger[update.effective_chat.id]["all_page"]}\n'
                                                                                        f'–í—Å—ë –≤–µ—Ä–Ω–æ?',
                                                                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False))
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–ï—Å–ª–∏ —è –Ω–µ –æ—à–∏–±–∞—é—Å—å, —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω—É–º–µ—Ä–æ–≤–∞–ª–∏—Å—å —Ü–∏—Ñ—Ä–∞–º–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ \"–î–∞\"!")
    elif triger == "norma_for_new_book":
        user_msg = update.message.text
        if user_msg.isnumeric():
            if int(user_msg) > 0:
                engine.execute(f"UPDATE books SET every_day_page = {user_msg} WHERE id = '{user_triger[update.effective_chat.id]['book_id']}';")
                logging.info(f"every_day_page = {user_msg} WHERE book_id = '{user_triger[update.effective_chat.id]['book_id']}")
                user(update,context,"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–ï—Å–ª–∏ —è –Ω–µ –æ—à–∏–±–∞—é—Å—å, —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω—É–º–µ—Ä–æ–≤–∞–ª–∏—Å—å —Ü–∏—Ñ—Ä–∞–º–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

###################################################################################################################
###################################################################################################################
###################################################################################################################
    elif triger == "free_time":
        if '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower():
            user(update, context, '—Ö–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞.')
        else:
            if '–∞–º–∏—Ä–∞' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                text = free_time("Amira", "–ê–º–∏—Ä–∞", user_triger[update.effective_chat.id]['week'])
                user(update, context, text)
            elif '–ª–∏–∑–∞' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                text = free_time("Lisa", "–õ–∏–∑–∞", user_triger[update.effective_chat.id]['week'])
                user(update, context, text)
            elif '–ª–µ–π–ª–∞' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                text = free_time("Leila", "–õ–µ–π–ª–∞", user_triger[update.effective_chat.id]['week'])
                user(update, context, text)
            elif '–≤–æ–≤–∞' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                text = free_time("Vova", "–í–æ–≤–∞", user_triger[update.effective_chat.id]['week'])
                user(update, context, text)
###################################################################################################################
###################################################################################################################
###################################################################################################################
    elif triger == "case":
        if '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' == update.message.text.lower():
            user(update, context, '—Ö–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å.')
        else:
            reply_keyboard = [['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
            if '–∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                user_triger[update.effective_chat.id]["close"]=True
                user_triger[update.effective_chat.id]["cancel"] = False
                user_triger[update.effective_chat.id]["choice"] = False
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False))
            elif '–æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' == update.message.text.lower():
                context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                user_triger[update.effective_chat.id]["close"] = False
                user_triger[update.effective_chat.id]["cancel"] = True
                user_triger[update.effective_chat.id]["choice"] = False
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False))
            elif '–≤—ã–±—Ä–∞—Ç—å –µ—â–µ...' == update.message.text.lower() or '–≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ' == update.message.text.lower():
                user_triger[update.effective_chat.id]["close"] = False
                user_triger[update.effective_chat.id]["cancel"] = False
                user_triger[update.effective_chat.id]["choice"] = True
                if str(update.effective_chat.id) != "462169878":
                    info = pd.read_sql_query(f"SELECT id, name_case, num_of_likes FROM list_cases WHERE repeated_date <= '{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}' AND name = '0';",engine)
                else:
                    info = pd.read_sql_query(f"SELECT id, name_case, num_of_likes FROM list_cases WHERE repeated_date <= '{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}' AND name = '0' AND for_vova = 'True';",engine)
                sms = ''
                if len(info) != 0:
                    user_triger[update.effective_chat.id]["choice"] = True
                    user_triger[update.effective_chat.id]["case_id"] = {}
                    for i in range(len(info)):
                        sms += f"{i+1}) {info.loc[i,'name_case']} - –Ω–∞–≥—Ä–∞–¥–∞ {info.loc[i,'num_of_likes']}üëç\n"
                        user_triger[update.effective_chat.id]["case_id"][i + 1] = info.loc[i, 'id']
                    context.bot.send_message(chat_id=update.effective_chat.id, text=sms, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False))
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —Å–µ–±–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                else:
                    user_triger[update.effective_chat.id]["choice"] = False
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
            elif update.message.text.isnumeric() and (user_triger[update.effective_chat.id]["cancel"] or user_triger[update.effective_chat.id]["close"] or user_triger[update.effective_chat.id]["choice"]):
                if len(user_triger[update.effective_chat.id]["case_id"]) >= int(update.message.text) and int(update.message.text) > 0:
                    id = user_triger[update.effective_chat.id]["case_id"][int(update.message.text)]
                    info = pd.read_sql_query(f"SELECT name_case, name, num_of_likes, random, access_denied FROM list_cases WHERE id = '{id}';", engine)
                    if user_triger[update.effective_chat.id]["close"]:# –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                        context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id - 1)
                        name = name_kids[update.effective_chat.id]
                        text = "–ì–æ—Ç–æ–≤–æ, –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π."
                        keyboard = [[InlineKeyboardButton('–î–∞üëç', callback_data=f'case-{id}-{update.effective_chat.id}-yes'),
                                     InlineKeyboardButton('–ù–µ—Ç', callback_data=f'case-{id}-{update.effective_chat.id}-no')]]
                        context.bot.send_message(chat_id=papa, text=name + ': "' + str(info.loc[0,"name_case"]) + '"\n–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞?',reply_markup=InlineKeyboardMarkup(keyboard))
                        context.bot.send_message(chat_id=mama, text=name + ': "' + str(info.loc[0,"name_case"]) + '"\n–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞?',reply_markup=InlineKeyboardMarkup(keyboard))
                    elif user_triger[update.effective_chat.id]["cancel"]:# –û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id - 1)
                        if info.loc[0,'access_denied'] != 'random':
                            print(info.loc[0,'random'])
                            engine.execute(f"UPDATE list_cases SET name = '0' WHERE id = '{id}';")
                            text = "–ì–æ—Ç–æ–≤–æ, –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                        else:
                            text = "–û—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ —Å –∫–µ–º-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å—Å—è."
                    elif user_triger[update.effective_chat.id]["choice"]:#–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                        if str(info.loc[0, 'name']) == '0':
                            context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id - 2)
                            engine.execute(f"UPDATE list_cases SET name = '{name_kids[update.effective_chat.id]}', antiduble = 0, access_denied = 'self' WHERE id = '{id}';")
                            text = f"–ì–æ—Ç–æ–≤–æ, –∑–∞–¥–∞—á–∞ \"{info.loc[0,'name_case']}\" –ø—Ä–∏—Å–≤–æ–µ–Ω–∞."
                        else:
                            text = f"–û–π, –∑–∞–¥–∞—á–∞ \"{info.loc[0, 'name_case']}\" —É–∂–∞ –∑–∞–Ω—è—Ç–∞ {str(info.loc[0, 'name'])[:len(str(info.loc[0, 'name']))-1]}–æ–π.\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ."
                    logging.info(f'{name_kids[update.effective_chat.id]} - {text}')
                    user(update, context, text)
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑)")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–∞–º–∏!")
###################################################################################################################
###################################################################################################################
###################################################################################################################
    # elif triger == 'token':
    #     num = user_triger[943180118]["num"]
    #     flow = user_triger[943180118]["flow"]
    #     credentials = flow.run_console_code(update.message.text)
    #     pickle.dump(credentials, open(f"calendar_tokens/token_{data_kids[kids[num]]}.pkl", "wb"))
    #     if num < 4:
    #         num += 1
    #         token_download(update, context, num)
    elif triger == 'mega_msg':
        search_result = pd.read_sql_query(f"SELECT name,access,user_id FROM user_family WHERE access = 0;", engine)
        for i in range(len(search_result)):
            if str(search_result.loc[
                       i, 'access']) == "0":  # update.effective_chat.id == 232749605 or update.effective_chat.id == 943180118:
                try:
                    context.bot.send_message(chat_id=int(search_result.loc[i, 'user_id']), text=update.message.text)
                    logging.info(f'{str(search_result.loc[i, "name"])} - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. send_mega_msg()')
                except Exception:
                    logging.info(f'{str(search_result.loc[i, "name"])} - –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. send_mega_msg()')
###################################################################################################################
####################                       –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ï–î–ê                            ##############################
###################################################################################################################
    #–í—Å–µ –¥–µ—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    elif triger == 'products':
        categories_pd = pd.read_sql_query("SELECT name FROM categories ORDER BY name ASC;", engine)
        if '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–µ–¥–∞"' == update.message.text.lower():
            eat(update, context, user_triger)
        elif '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower() or '–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥' == update.message.text.lower():
            globals()[triger](update, context, user_triger)
        elif '–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É' == update.message.text.lower():
            info_categories = pd.read_sql(f"SELECT * FROM categories;", engine)
            keyboard = []
            for k in range(len(info_categories)):
                keyboard += [[InlineKeyboardButton(info_categories.loc[k, 'name'],
                                                   callback_data='query_for_buy_products-' + str(info_categories.loc[k, 'name']))]]
            sms = "–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?"
            context.bot.send_message(chat_id=update.effective_chat.id, text=sms, reply_markup=InlineKeyboardMarkup(keyboard))
        elif "–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç" == update.message.text.lower():
            user_triger[update.effective_chat.id]['New'] = True
            user_triger[update.effective_chat.id]['Delete'] = False
            user_triger[update.effective_chat.id]['Edit_link'] = False
            context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                             reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                              one_time_keyboard=False))
        elif "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç" == update.message.text.lower() or "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã" == update.message.text.lower() or '–∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç' == update.message.text.lower():
            if "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç" == update.message.text.lower():
                user_triger[update.effective_chat.id]['choice'] = 'delete'
            elif '–∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç' == update.message.text.lower():
                user_triger[update.effective_chat.id]['choice'] = 'edit_link'
            else:
                user_triger[update.effective_chat.id]['choice'] = 'show'
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é,–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏—Ñ—Ä–∞–º–∏.",
                                     reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                                      one_time_keyboard=False))
            text = ''
            for i in range(len(categories_pd)):
                text += f'{i + 1}) {categories_pd.loc[i, "name"]}\n'
            context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        elif user_triger[update.effective_chat.id]['choice'] != 'None' and user_triger[update.effective_chat.id]['categories'] == 'None':
            if update.message.text.isnumeric():
                if int(update.message.text) <= len(categories_pd) and int(update.message.text) > 0:
                    user_triger[update.effective_chat.id]['categories'] = categories_pd.loc[int(update.message.text)-1, 'name']
                    products_pd = pd.read_sql_query(f"SELECT name, link FROM products WHERE categories = '{user_triger[update.effective_chat.id]['categories']}';",engine)
                    if len(products_pd) != 0:
                        if "delete" == user_triger[update.effective_chat.id]['choice']:
                            user_triger[update.effective_chat.id]['New'] = False
                            user_triger[update.effective_chat.id]['Delete'] = True
                            user_triger[update.effective_chat.id]['Edit_link'] = False
                            context.bot.send_message(chat_id=update.effective_chat.id,
                                                     text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.",
                                                     reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']],
                                                                                      resize_keyboard=True,
                                                                                      one_time_keyboard=False))
                        elif "edit_link" == user_triger[update.effective_chat.id]['choice']:
                            user_triger[update.effective_chat.id]['New'] = False
                            user_triger[update.effective_chat.id]['Delete'] = False
                            user_triger[update.effective_chat.id]['Edit_link'] = True
                            context.bot.send_message(chat_id=update.effective_chat.id,
                                                     text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É.",
                                                     reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']],
                                                                                      resize_keyboard=True,
                                                                                      one_time_keyboard=False))

                        text = ''
                        for i in range(len(products_pd)):
                            text += f"{i + 1}) {products_pd.loc[i, 'name']} ({products_pd.loc[i, 'link']})\n"
                        context.bot.send_message(chat_id=update.effective_chat.id, text=text)
                        if "show" == user_triger[update.effective_chat.id]['choice']:
                            globals()[triger](update, context, user_triger)
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç.")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞. –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–≤–∞—Ä?")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")
        else:
            if user_triger[update.effective_chat.id]['New'] or user_triger[update.effective_chat.id]['Delete'] or user_triger[update.effective_chat.id]['Edit_link']:
                if user_triger[update.effective_chat.id]['New']:
                    #### –®–ê–ì ‚Ññ 0 (–ø–µ—Ä–≤—ã–π :)) ####
                    if user_triger[update.effective_chat.id]['step'] == 0:
                        user_triger[update.effective_chat.id]['step'] = 1
                        user_triger[update.effective_chat.id]['name'] = update.message.text
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç.",
                             reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                              one_time_keyboard=False))
                    #### –®–ê–ì ‚Ññ 1  ####
                    elif user_triger[update.effective_chat.id]['step'] == 1:
                        user_triger[update.effective_chat.id]['step'] = 2
                        user_triger[update.effective_chat.id]['link'] = update.message.text
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞. –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–≤–∞—Ä?",
                             reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                              one_time_keyboard=False))
                        text = ''
                        for i in range(len(categories_pd)):
                            text += f'{i + 1}) {categories_pd.loc[i,"name"]}\n'
                        context.bot.send_message(chat_id=update.effective_chat.id, text=text)
                        #### –®–ê–ì ‚Ññ 2  ####
                    elif user_triger[update.effective_chat.id]['step'] == 2:
                        if update.message.text.isnumeric():
                            if int(update.message.text) <= len(categories_pd) and int(update.message.text) > 0:
                                engine.execute(f"INSERT INTO products(name, link, categories) VALUES('{user_triger[update.effective_chat.id]['name']}',"
                                               f"'{user_triger[update.effective_chat.id]['link']}',"
                                               f"'{categories_pd.loc[int(update.message.text) - 1,'name']}');")
                                user_triger[update.effective_chat.id]['step'] = 0
                                context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n–ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë, –ø—Ä–æ—Å—Ç–æ –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                             reply_markup=ReplyKeyboardMarkup([['–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥']], resize_keyboard=True,
                                                              one_time_keyboard=False))
                            else:
                                context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞. –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–≤–∞—Ä?")
                        else:
                            context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
                            return
                elif user_triger[update.effective_chat.id]['Delete'] and user_triger[update.effective_chat.id]['categories'] != "None":
                    products_pd = pd.read_sql_query(f"SELECT name, link FROM products WHERE categories = '{user_triger[update.effective_chat.id]['categories']}';",engine)
                    if update.message.text.isnumeric():
                        if int(update.message.text) <= len(products_pd) and int(update.message.text) > 0:
                            user_triger[update.effective_chat.id]['Delete'] = False
                            engine.execute(f"DELETE FROM products WHERE link = '{str(products_pd.loc[int(update.message.text)-1,'link']).replace('%','%%')}';")
                            context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω.")
                            globals()[triger](update, context, user_triger)
                elif user_triger[update.effective_chat.id]['Edit_link'] and user_triger[update.effective_chat.id]['categories'] != "None":
                    if user_triger[update.effective_chat.id]['step'] == 0:
                        products_pd = pd.read_sql_query(f"SELECT name, link FROM products WHERE categories = '{user_triger[update.effective_chat.id]['categories']}';", engine)
                        user_triger[update.effective_chat.id]['step'] = 1
                        if update.message.text.isnumeric():
                            user_triger[update.effective_chat.id]['name'] = str(products_pd.loc[int(update.message.text) - 1, 'name']).replace('%','%%')
                            user_triger[update.effective_chat.id]['link'] = str(products_pd.loc[int(update.message.text) - 1, 'link']).replace('%','%%')
                            context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{user_triger[update.effective_chat.id]['name']}\".")
                        else:
                            context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
                    elif user_triger[update.effective_chat.id]['step'] == 1:
                        engine.execute(f"UPDATE products SET link = '{str(update.message.text).replace('%','%%')}' WHERE link = '{user_triger[update.effective_chat.id]['link']}' and name = '{user_triger[update.effective_chat.id]['name']}';")
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –∑–∞–ø–æ–º–Ω–∏–ª.")
                        globals()[triger](update, context, user_triger)
    # –í—Å–µ –¥–µ—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    elif triger == 'categories':
        categories_pd = pd.read_sql_query("SELECT name FROM categories ORDER BY name ASC;", engine)
        if '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–µ–¥–∞"' == update.message.text.lower():
            eat(update, context, user_triger)
        if '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower() or '–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥' == update.message.text.lower():
            globals()[triger](update, context, user_triger)
        elif "–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é" == update.message.text.lower():
            user_triger[update.effective_chat.id]['New'] = True
            user_triger[update.effective_chat.id]['Delete'] = False
            context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                             reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                              one_time_keyboard=False))
        elif "—É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" == update.message.text.lower() or "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" == update.message.text.lower():
            if len(categories_pd) != 0:
                if "—É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" == update.message.text.lower():
                    user_triger[update.effective_chat.id]['New'] = False
                    user_triger[update.effective_chat.id]['Delete'] = True
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.",
                             reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                              one_time_keyboard=False))
                text=''
                for i in range(len(categories_pd)):
                    text += f'{i+1}) {categories_pd.loc[i,"name"]}\n'
                context.bot.send_message(chat_id=update.effective_chat.id, text=text)
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç.")
        else:
            if user_triger[update.effective_chat.id]['New'] or user_triger[update.effective_chat.id]['Delete']:
                if user_triger[update.effective_chat.id]['New']:
                    engine.execute(f"INSERT INTO categories(name) VALUES('{update.message.text}');")  # –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø—Ä–æ—Å—Ç–æ –≤–ø–∏—à–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                             reply_markup=ReplyKeyboardMarkup([['–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥']], resize_keyboard=True,
                                                              one_time_keyboard=False))
                elif user_triger[update.effective_chat.id]['Delete']:
                    if update.message.text.isnumeric():
                        if int(update.message.text) <= len(categories_pd) and int(update.message.text) > 0:
                            remember = categories_pd.loc[int(update.message.text)-1, 'name']
                            engine.execute(f"DELETE FROM categories WHERE name = '{remember}';")
                            user_triger[update.effective_chat.id]['Delete'] = False
                            context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {remember} —É–¥–∞–ª–µ–Ω–∞.")
                            globals()[triger](update, context, user_triger)
                        else:
                            context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.")
    # –í—Å–µ –¥–µ—Å—Ç–≤–∏—è —Å —á–∞—Å—Ç–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞
    elif triger == 'frequency':
        categories_pd = pd.read_sql_query("SELECT name, frequency FROM categories ORDER BY name ASC;", engine)
        if '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–µ–¥–∞"' == update.message.text.lower():
            eat(update, context, user_triger)
        elif '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower():
            globals()[triger](update, context, user_triger)
        elif '–∏–∑–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å' == update.message.text.lower():
            if '–∏–∑–º–µ–Ω–∏—Ç—å' == update.message.text.lower():
                # context.bot.send_message(chat_id=update.effective_chat.id, text=text + "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.")
                user_triger[update.effective_chat.id]['Edit'] = True
                """–∏–∑–º–µ–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è"""
            elif '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å' == update.message.text.lower():
                user_triger[update.effective_chat.id]['Edit'] = False
                # context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True, one_time_keyboard=False))
                """–ø—Ä–µ–¥–ª–æ–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–π"""
           #### –ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—É —É–∂–∞–ª–∏—Ç—å —ç—Ç—É —á–∞—Å—Ç—å ####
            user_triger[update.effective_chat.id]['edit_products'] = False
            if user_triger[update.effective_chat.id]['Edit']:
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–∏—Ñ—Ä–∞–º–∏.",
                                         reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                                          one_time_keyboard=False))
            text = ''
            for i in range(len(categories_pd)):
                text += f'{i + 1}) {categories_pd.loc[i, "name"]} - 1 —Ä–∞–∑ –≤ {categories_pd.loc[i, "frequency"]}–¥–Ω.\n'
            context.bot.send_message(chat_id=update.effective_chat.id, text=text)
            if user_triger[update.effective_chat.id]['Edit'] == False:
                globals()[triger](update, context, user_triger)
            #### –ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—É —É–∂–∞–ª–∏—Ç—å —ç—Ç—É —á–∞—Å—Ç—å  –∏ —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –Ω–∏–∂–µ####
            # context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ {update.message.text.lower()}? –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π?", reply_markup=ReplyKeyboardMarkup([['–ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–∫–∞—Ç–µ–≥–æ—Ä–∏–π'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–ï–¥–∞"']], resize_keyboard=True, one_time_keyboard=False))
        # elif '–ø—Ä–æ–¥—É–∫—Ç–æ–≤' == update.message.text.lower():
        #     user_triger[update.effective_chat.id]['edit_products'] = True
        #     if user_triger[update.effective_chat.id]['step'] == 0:
        #         user_triger[update.effective_chat.id]['step'] = 1
        #         context.bot.send_message(chat_id=update.effective_chat.id,
        #                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–∏—Ñ—Ä–∞–º–∏.",
        #                                  reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
        #                                                                   one_time_keyboard=False))
        #         text = ''
        #         for i in range(len(categories_pd)):
        #             text += f'{i + 1}) {categories_pd.loc[i, "name"]}\n'
        #         context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        # elif '–∫–∞—Ç–µ–≥–æ—Ä–∏–π' == update.message.text.lower():
        #     user_triger[update.effective_chat.id]['edit_products'] = False
        #     if user_triger[update.effective_chat.id]['Edit']:
        #         context.bot.send_message(chat_id=update.effective_chat.id,
        #                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–∏—Ñ—Ä–∞–º–∏.",
        #                                  reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
        #                                                                   one_time_keyboard=False))
        #     text = ''
        #     for i in range(len(categories_pd)):
        #         text += f'{i + 1}) {categories_pd.loc[i, "name"]} - 1 —Ä–∞–∑ –≤ {categories_pd.loc[i, "frequency"]}–¥–Ω.\n'
        #     context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        #     if user_triger[update.effective_chat.id]['Edit'] == False:
        #         globals()[triger](update, context, user_triger)
        elif user_triger[update.effective_chat.id]['edit_products']:
            if user_triger[update.effective_chat.id]['step'] == 1:
                if update.message.text.isnumeric():
                    if int(update.message.text) <= len(categories_pd) and int(update.message.text) > 0:
                        user_triger[update.effective_chat.id]['step'] = 2
                        user_triger[update.effective_chat.id]['categories'] = str(categories_pd.loc[int(update.message.text)-1,'name'])
                        info = pd.read_sql(f"SELECT name, link, frequency FROM products WHERE categories = '{user_triger[update.effective_chat.id]['categories']}' ORDER BY name ASC;",engine)
                        if len(info) != 0:
                            text = ''
                            for i in range(len(info)):
                                text += f'{i + 1}) {info.loc[i, "name"]} - 1 —Ä–∞–∑ –≤ {info.loc[i, "frequency"]}–¥–Ω.\n'
                            context.bot.send_message(chat_id=update.effective_chat.id, text=text)
                        if user_triger[update.effective_chat.id]['Edit']:
                            context.bot.send_message(chat_id=update.effective_chat.id,
                                                     text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —Ü–∏—Ñ—Ä–∞–º–∏.",
                                                     reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']],
                                                                                      resize_keyboard=True,
                                                                                      one_time_keyboard=False))
                        else:
                            globals()[triger](update, context, user_triger)
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")
            elif user_triger[update.effective_chat.id]['step'] == 2 and user_triger[update.effective_chat.id]['Edit']:
                if update.message.text.isnumeric():
                    info = pd.read_sql(f"SELECT name, link, frequency FROM products WHERE categories = '{user_triger[update.effective_chat.id]['categories']}' ORDER BY name ASC;", engine)
                    if int(update.message.text) <= len(info) and int(update.message.text) > 0:
                        user_triger[update.effective_chat.id]['step'] = 3
                        user_triger[update.effective_chat.id]['link'] = str(info.loc[int(update.message.text) - 1, 'link'])
                        context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ 1 —Ä–∞–∑ –≤ {info.loc[int(update.message.text) - 1, 'frequency']} –¥–Ω.\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id,
                                                 text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id,
                                             text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")
            elif user_triger[update.effective_chat.id]['step'] == 3 and user_triger[update.effective_chat.id]['Edit']:
                if ',' in update.message.text:
                    frequency = str(update.message.text).replace(',', '.')
                else:
                    frequency = update.message.text

                engine.execute(f"UPDATE products SET frequency = '{frequency}' WHERE link = '{user_triger[update.effective_chat.id]['link']}';")
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ì–æ—Ç–æ–≤–æ, –∑–∞–ø–æ–º–Ω–∏–ª.")
                globals()[triger](update, context, user_triger)
        elif user_triger[update.effective_chat.id]['Edit'] and user_triger[update.effective_chat.id]['edit_products'] == False:
            if user_triger[update.effective_chat.id]['step'] == 0:
                if update.message.text.isnumeric():
                    if int(update.message.text) <= len(categories_pd) and int(update.message.text) > 0:
                        user_triger[update.effective_chat.id]['step'] = 1
                        user_triger[update.effective_chat.id]['name'] = str(
                            categories_pd.loc[int(update.message.text) - 1, 'name'])
                        context.bot.send_message(chat_id=update.effective_chat.id,
                                                 text=f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏–∑ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–∏–≥–æ—Ä–∏–∏ 1 —Ä–∞–∑ –≤ {categories_pd.loc[int(update.message.text) - 1, 'frequency']} –¥–Ω.\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id,
                                                 text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id,
                                             text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")
            elif user_triger[update.effective_chat.id]['step'] == 1:
                if ',' in update.message.text:
                    frequency = str(update.message.text).replace(',', '.')
                else:
                    frequency = update.message.text
                engine.execute(f"UPDATE categories SET frequency = '{frequency}' WHERE name = '{user_triger[update.effective_chat.id]['name']}';")
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ì–æ—Ç–æ–≤–æ, –∑–∞–ø–æ–º–Ω–∏–ª.")
                globals()[triger](update, context, user_triger)
    elif triger == 'query_for_buy_next':
        info = pd.read_sql(f"SELECT name FROM user_family WHERE user_id = '{update.effective_chat.id}';",engine)
        check_info = pd.read_sql(f"SELECT quantity FROM shopping_list WHERE products = '{str(user_triger[update.effective_chat.id]['products_name']).replace('%','%%')}' AND order_date = '{str(datetime.now().strftime('%d.%m.%Y'))}' ORDER BY quantity DESC LIMIT 1;", engine)
        not_double = True
        if update.message.text.isnumeric():
            if len(check_info) != 0:
                if int(update.message.text) <= int(check_info.loc[0, "quantity"]):#max_check_info_quantity:
                    not_double = False
                    check_info_name = pd.read_sql(f"SELECT name FROM shopping_list WHERE products = '{str(user_triger[update.effective_chat.id]['products_name']).replace('%', '%%')}' AND quantity = '{check_info.loc[0, 'quantity']}' AND order_date = '{str(datetime.now().strftime('%d.%m.%Y'))}';",engine)
                    if check_info_name.loc[0, 'name'] == "–ê–Ω–¥—Ä–µ–π":
                        str_and = '–∏ '
                        install = '—É—Å—Ç–∞–Ω–æ–≤–∏–ª'
                    elif "–¥–ª—è –±–ª—é–¥–∞" in check_info_name.loc[0, 'name']:
                        str_and = ''
                        install = ', —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ'
                    else:
                        str_and = '–∏ '
                        install = '—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞'
                    user(update, context, f"–î–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω {str_and}{check_info_name.loc[0, 'name']} {install} {check_info.loc[0, 'quantity']}—à—Ç.")
            if not_double:
                engine.execute(f"INSERT INTO shopping_list(categories, products, quantity, name, order_date) "
                               f"VALUES('{user_triger[update.effective_chat.id]['categories']}',"
                               f"'{str(user_triger[update.effective_chat.id]['products_name']).replace('%','%%')}',"
                               f"'{update.message.text}','{info.loc[0, 'name']}',"
                               f"'{str(datetime.now().strftime('%d.%m.%Y'))}');")
                user(update, context, "–î–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.")
            user_triger.pop(update.effective_chat.id)
        else:
            if '–æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥' == update.message.text.lower():
                user(update, context, "–û—Ç–º–µ–Ω–∞, –¥–µ–π—Å—Ç–≤–∏–π. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
    elif triger == 'dish':
        if '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–µ–¥–∞"' == update.message.text.lower():
            eat(update, context, user_triger)
        elif '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower():
            globals()[triger](update, context, user_triger)
        elif '–°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä –¥–ª—è –±–ª—é–¥–∞' == update.message.text:
            user_triger[update.effective_chat.id]['create'] = True
            context.bot.send_message(chat_id=update.effective_chat.id,text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞.',
                             reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                              one_time_keyboard=False))
        elif '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–æ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É' == update.message.text:
            user_triger[update.effective_chat.id]['create'] = False
            dish_pd = pd.read_sql(f"SELECT * FROM dish;", engine)
            keyboard = []
            for j in range(len(dish_pd)):
                print(j)
                keyboard += [[InlineKeyboardButton(dish_pd.loc[j, 'name'], callback_data='dish_add-' + str(dish_pd.loc[j, 'id']))]]
            if len(keyboard) > 0:
                sms = "–î–ª—è –∫–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É?"
                context.bot.send_message(chat_id=update.effective_chat.id, text=sms,
                                         reply_markup=InlineKeyboardMarkup(keyboard))
            #######################################################
        elif user_triger[update.effective_chat.id]['create']:
            if user_triger[update.effective_chat.id]['step'] == 0:
                user_triger[update.effective_chat.id]['name'] = update.message.text
                context.bot.send_message(chat_id=update.effective_chat.id, text='–°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞?',
                                         reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                                          one_time_keyboard=False))
                user_triger[update.effective_chat.id]['step'] = 1
            elif user_triger[update.effective_chat.id]['step'] == 1:

                user_triger[update.effective_chat.id]['cooking_time'] = update.message.text
                context.bot.send_message(chat_id=update.effective_chat.id, text='–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞?',
                                         reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True,
                                                                          one_time_keyboard=False))
                user_triger[update.effective_chat.id]['step'] = 2

            elif user_triger[update.effective_chat.id]['step'] == 2:
                if update.message.text.isnumeric():
                    user_triger[update.effective_chat.id]['num_need_people'] = update.message.text
                    categories = pd.read_sql(f"SELECT * FROM categories;", engine)
                    keyboard = []
                    for j in range(len(categories)):
                        keyboard += [[InlineKeyboardButton(categories.loc[j, 'name'], callback_data='dish_choice_categories-' + str(categories.loc[j, 'name']))]]
                    if len(keyboard) > 1:
                        sms = "–ß—Ç–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞?"
                        context.bot.send_message(chat_id=update.effective_chat.id, text=sms, reply_markup=InlineKeyboardMarkup(keyboard))
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–û–±—ã—á–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–æ–¥—è—Ç —Ü–∏—Ñ—Ä–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        elif '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç' == update.message.text or '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç' == update.message.text or '–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç' == update.message.text or '–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ' == update.message.text or '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä –¥–ª—è –±–ª—é–¥–∞' == update.message.text:
            info = pd.read_sql("SELECT * FROM dish ORDER BY id ASC;", engine)
            if len(info) != 0:
                text = ''
                for i in range(len(info)):
                    text += f'{i + 1}) {info.loc[i, "name"]}\n'
                if '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç' == update.message.text:
                    user_triger[update.effective_chat.id]['add_note'] = True
                    user_triger[update.effective_chat.id]['show_note'] = False
                    user_triger[update.effective_chat.id]['show_product'] = False
                    user_triger[update.effective_chat.id]['delete'] = 'None'
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –±–ª—é–¥–æ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç(–∏–ª–∏ –∑–∞–º–µ–Ω–∏–º –Ω–∞ –Ω–æ–≤—ã–π).\n"+text)
                elif '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç' == update.message.text:
                    user_triger[update.effective_chat.id]['add_note'] = False
                    user_triger[update.effective_chat.id]['show_note'] = True
                    user_triger[update.effective_chat.id]['show_product'] = False
                    user_triger[update.effective_chat.id]['delete'] = 'None'
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –±–ª—é–¥–æ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç.\n"+text)
                elif '–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç' == update.message.text:
                    user_triger[update.effective_chat.id]['add_note'] = False
                    user_triger[update.effective_chat.id]['show_note'] = False
                    user_triger[update.effective_chat.id]['show_product'] = False
                    user_triger[update.effective_chat.id]['delete'] = '—Ä–µ—Ü–µ–ø—Ç'
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –±–ª—é–¥–æ —Ä–µ—Ü–µ–ø—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n"+text)
                elif '–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ' == update.message.text:
                    user_triger[update.effective_chat.id]['add_note'] = False
                    user_triger[update.effective_chat.id]['show_note'] = False
                    user_triger[update.effective_chat.id]['show_product'] = False
                    user_triger[update.effective_chat.id]['delete'] = '–±–ª—é–¥–æ'
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –±–ª—é–¥–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n"+text)
                elif '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä –¥–ª—è –±–ª—é–¥–∞' == update.message.text:
                    user_triger[update.effective_chat.id]['add_note'] = False
                    user_triger[update.effective_chat.id]['show_note'] = False
                    user_triger[update.effective_chat.id]['show_product'] = True
                    user_triger[update.effective_chat.id]['delete'] = 'None'
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –±–ª—é–¥–æ, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n"+text)
        elif user_triger[update.effective_chat.id]['add_note']:
            if user_triger[update.effective_chat.id]['step'] == 0:
                info = pd.read_sql("SELECT * FROM dish ORDER BY id ASC;", engine)
                if update.message.text.isnumeric():
                    if int(update.message.text) <= len(info):
                        user_triger[update.effective_chat.id]['step'] = 1
                        i = int(update.message.text) - 1
                        user_triger[update.effective_chat.id]['name'] = info.loc[i,'name']
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏ —è –µ–≥–æ –∑–∞–ø–æ–º–Ω—é.")
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")
            elif user_triger[update.effective_chat.id]['step'] == 1:
                engine.execute(f"UPDATE dish SET note = '{update.message.text}' WHERE name = '{user_triger[update.effective_chat.id]['name']}';")
                context.bot.send_message(chat_id=update.effective_chat.id, text="–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª!")
                user_triger.pop(update.effective_chat.id)
                user_triger[update.effective_chat.id] = {
                    'triger': "dish",
                    'create': False,
                    'add_note': False,
                    'show_note': False,
                    'show_product': False,
                    'delete': 'None',
                    'name': 'None',
                    'num_need_people': 1,
                    'coocing_time': 0,
                    'step': 0,
                    'list_products': []
                }
        elif user_triger[update.effective_chat.id]['show_note']:
            info = pd.read_sql("SELECT * FROM dish ORDER BY id ASC;", engine)
            if update.message.text.isnumeric():
                if int(update.message.text) <= len(info):
                    i = int(update.message.text) - 1
                    if info.loc[i, 'note'] is not None:
                        context.bot.send_message(chat_id=update.effective_chat.id, text=f"\"{info.loc[i,'name']}\":\n{info.loc[i,'note']}")
                    else:
                        context.bot.send_message(chat_id=update.effective_chat.id, text=f"\"{info.loc[i, 'name']}\". –†–µ—Ü–µ–ø—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞ —Ü–∏—Ñ—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")
        elif user_triger[update.effective_chat.id]['delete'] != 'None':
            info = pd.read_sql("SELECT * FROM dish ORDER BY id ASC;", engine)
            if update.message.text.isnumeric():
                if int(update.message.text) <= len(info):
                    i = int(update.message.text) - 1
                    if user_triger[update.effective_chat.id]['delete'] == '—Ä–µ—Ü–µ–ø—Ç':
                        engine.execute(f"UPDATE dish SET note = '–†–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç.' WHERE name = '{info.loc[i, 'name']}';")
                        context.bot.send_message(chat_id=update.effective_chat.id, text=f"–†–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ \"{info.loc[i, 'name']}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
                    elif user_triger[update.effective_chat.id]['delete'] == '–±–ª—é–¥–æ':
                        engine.execute(f"DELETE FROM dish WHERE name = '{info.loc[i, 'name']}';")
                        context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ë–ª—é–¥–æ \"{info.loc[i, 'name']}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
        elif user_triger[update.effective_chat.id]['show_product']:
            info = pd.read_sql("SELECT * FROM dish ORDER BY id ASC;", engine)
            if update.message.text.isnumeric():
                if int(update.message.text) <= len(info):
                    i = int(update.message.text) - 1
                    list_name_product = ''
                    for id_product in str(info.loc[i, 'list_product']).split(','):
                        product_db = pd.read_sql(f"SELECT name FROM products WHERE id = {id_product};", engine)
                        list_name_product += "‚Ä¢ " + str(product_db.loc[0, 'name']) + '\n'
                    sms = f"–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {info.loc[i, 'name']}\n" \
                          f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{list_name_product}"
                    context.bot.send_message(chat_id=update.effective_chat.id, text=sms)
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id,
                                             text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞. –¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç!")
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")

    elif triger == 'dish_like':
        if update.message.text.isnumeric():
            engine.execute(f"UPDATE dish SET like_dish = '{int(update.message.text)}' WHERE id = '{user_triger[update.effective_chat.id]['id']}'")
            context.bot.send_message(chat_id=update.effective_chat.id, text="–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–æ–º–Ω–∏–ª.")
            user_triger.pop(update.effective_chat.id)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –±–ª—é–¥–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")