# coding=UTF-8
#
#
import pandas as pd
import logging
import time

from work import TELEGRAM_TOKEN_TEST, ivea_family, papa, mama, data_kids, working_folder, name_kids, kids
from flow_my import InstalledAppFlow
import pickle

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from sqlalchemy import create_engine
from threading import Thread
from datetime import datetime, timedelta

from additional_menu.triger import handle_text as triger, eat, products, categories, frequency, dish
from additional_menu.parents import handle_text as parents
from additional_menu.children import handle_text as children

# logging.basicConfig(filename=working_folder + 'bot_v3.log',
#                     filemode='a',
#                     level=logging.INFO,
#                     format='%(asctime)s %(process)d-%(levelname)s %(message)s',
#                     datefmt='%d-%b-%y %H:%M:%S')

engine = create_engine(ivea_family)  # –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–µ–¥–∏–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º

updater = Updater(token=TELEGRAM_TOKEN_TEST, use_context=True)  # –ø–æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º –ø–æ —Ç–æ–∫–µ–Ω—É

dispatcher = updater.dispatcher

user_triger = {}

data = {
    232749605: "–ê–Ω–¥—Ä–µ–π",
    903477454: "–ò–Ω–Ω–∞",
    943180118: "–ö–æ—Å—Ç—è",
    462169878: "–í–æ–≤–∞",
    'name_institut': ['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏','–ú–ì–¢–£ –°—Ç–∞–Ω–∫–∏–Ω','–ù–ò–Ø–£ –ú–ò–§–ò'],
    'link_institut': ['https://t.me/+eq5FJ2phgpUwYzI6', 'https://t.me/+CDFlnO4DGhliODBi', 'https://t.me/+4OzrVgjOEBUwMTYy', 'https://t.me/+GgnRSXCMUoMyYWMy','https://stankin.ru/','https://www.mephi.ru/']
}

def start(update: Update, context: CallbackContext):
    search_result = engine.execute(f"SELECT name,access FROM user_family WHERE user_id = '{str(update.effective_chat.id)}';").fetchall()
    if len(search_result) != 0:
        if str(search_result[0][1]) == "1" or str(search_result[0][1]) == "2":#update.effective_chat.id == 232749605 or update.effective_chat.id == 943180118:
            sms = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {str(search_result[0][0])}."
        else:
            sms = f'–ü—Ä–∏–≤–µ—Ç, {str(search_result[0][0])}'
        user(update, context,sms)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø –í–∞—Å –Ω–µ –∑–Ω–∞—é. –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
        user_triger[update.effective_chat.id] = {
            "triger":"reg"
        }

def token_download(update, context, num = 0):
    scopes = ['https://www.googleapis.com/auth/calendar']
    flow = InstalledAppFlow.from_client_secrets_file(f"{working_folder}calendar_tokens/client_secret_{data_kids[kids[num]]}.json", scopes=scopes)
    link = flow.run_console_url()
    context.bot.send_message(chat_id=943180118, text=str(kids[num]))
    context.bot.send_message(chat_id=943180118, text=str(link))
    user_triger[943180118] = {
        "triger": "token",
        "num": num,
        "flow": flow
    }


def user(update, context,sms):
    search_result = engine.execute(f"SELECT name,access FROM user_family WHERE user_id = '{str(update.effective_chat.id)}';").fetchall()
    if len(search_result) != 0:
        if update.effective_chat.id in user_triger:
            user_triger.pop(update.effective_chat.id)
        if str(search_result[0][1]) == "1":#update.effective_chat.id == 232749605 or update.effective_chat.id == 943180118:
            reply_keyboard = [['–ê–º–∏—Ä–∞','–õ–∏–∑–∞','–õ–µ–π–ª–∞','–í–æ–≤–∞'], ['–°–ø–∏—Å–æ–∫ –¥–µ–ª...', '–ò–Ω—Å—Ç–∏—Ç—É—Ç'],['–•–æ—Ç—è—Ç –ø–æ—Ö–≤–∞–ª—É','–û—Ü–µ–Ω–∏—Ç—å','–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']]
        elif str(search_result[0][1]) == "2":#update.effective_chat.id == 232749605 or update.effective_chat.id == 943180118:
            reply_keyboard = [['–ê–º–∏—Ä–∞','–õ–∏–∑–∞','–õ–µ–π–ª–∞','–í–æ–≤–∞'], ['–•–æ—Ç—è—Ç –ø–æ—Ö–≤–∞–ª—É', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']]
        else:
            reply_keyboard = [['–ö–Ω–∏–≥–∏'],['–•–æ—á—É –ø–æ—Ö–≤–∞–ª—É','Skill','–º–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª'],['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']]
        if update.effective_chat.id == 462169878:
            reply_keyboard += [['–ü—Ä–æ–±–ª–µ–º—ã', '–ò–Ω—Å—Ç–∏—Ç—É—Ç','–ï–¥–∞']]
        else:
            if str(search_result[0][1]) != "2":
                reply_keyboard += [['–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ','–ï–¥–∞']]
        context.bot.send_message(chat_id=update.effective_chat.id, text=sms, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False))
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø –í–∞—Å –Ω–µ –∑–Ω–∞—é. –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
        user_triger[update.effective_chat.id] = {
            "triger":"reg"
        }
# def mega_msg(update, context):
#     search_result = pd.read_sql_query(f"SELECT name,access,user_id FROM user_family WHERE access = 0;", engine)
#     for i in range(len(search_result)):
#         if str(search_result.loc[i, 'access']) == "0":  # update.effective_chat.id == 232749605 or update.effective_chat.id == 943180118:
#             sms = f'–ü—Ä–∏–≤–µ—Ç, {str(search_result.loc[i, "name"])}, –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞!\n–ó–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —Å–∫–∏–ª–æ–≤ –≤–Ω–µ–¥—Ä—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤:\n–µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–∫–∏–ª–æ–≤, —Ç–æ...\n–Ω–∞ 5–π –¥–µ–Ω—å = 10üëé\n–Ω–∞ 10–π –¥–µ–Ω—å = 20üëé\n–Ω–∞ 20–π –¥–µ–Ω—å = 30üëé\n–Ω–∞ 30–π –¥–µ–Ω—å = 50üëé\n–¢—ã —É–∂–µ –º–æ–∂–µ—à—å –∑–∞–º–µ—Ç–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –ø–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ.'
#             try:
#                 context.bot.send_message(chat_id=int(search_result.loc[i, 'user_id']), text=sms)
#                 logging.info(f'{str(search_result.loc[i, "name"])} - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.')
#             except Exception:
#                 logging.info(f'{str(search_result.loc[i, "name"])} - –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.')
def mega_msg(update, context):
    user_triger[update.effective_chat.id] = {
        "triger": "mega_msg",
    }
    context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å!")

def button(update: Update, context: CallbackContext) -> None:  # —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫.
    query = update.callback_query
    query.answer()
    if 'YES' in query.data:
        engine.execute(f"INSERT INTO answer(date, name, answer_kids) VALUES('{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}','{str(query.data.split('-')[1])}','–î–∞');")
        engine.execute("UPDATE user_family SET answer = 1, comment = 'None' WHERE user_id = '" + str(update.effective_chat.id) +"';")
        context.bot.send_message(chat_id=papa, text=str(query.data.split('-')[1]) + " —Ç–∞–±–ª–µ—Ç–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª.")#"( –û—Ç–≤–µ—Ç –î–ê)")
        query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ!üòä")
    elif 'NO' in query.data:
        engine.execute(f"INSERT INTO answer(date, name, answer_kids) VALUES('{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}','{str(query.data.split('-')[1])}','–ù–µ—Ç');")
        engine.execute("UPDATE user_family SET answer = 2, comment = 'None' WHERE user_id = '" + str(update.effective_chat.id) + "';")
        context.bot.send_message(chat_id=papa, text=str(query.data.split('-')[1]) + " (–û—Ç–≤–µ—Ç –ù–ï–¢)")
        user_triger[update.effective_chat.id] = {
            "triger": "comment",
            "name": str(query.data.split('-')[1])
        }
        query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É")
        logging.info(str(query.data.split('-')[1]) + " (–û—Ç–≤–µ—Ç –ù–µ—Ç) –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É")
        Thread(target=Timer, args=(update, context, 600)).start()
    elif 'antimark' in query.data:
        name_kid = str(query.data.split('-')[1])
        info = pd.read_sql_query(f"SELECT mark, every_day, star, antimark, anti_every_day, poo, user_id FROM user_family WHERE name = '{name_kid}';", engine)
        recipient = pd.read_sql_query(f"SELECT name, user_id FROM user_family WHERE access = '2';", engine)
        new_antimark = int(query.data.split('-')[2]) * 2
        antimark = int(info.loc[0,'antimark'])+int(query.data.split('-')[2])
        anti_every_day = int(info.loc[0,'anti_every_day'])+int(query.data.split('-')[2])
        poo = int(info.loc[0,'poo'])
        mark = int(info.loc[0, 'mark'])
        every_day = int(info.loc[0, 'every_day'])
        star = int(info.loc[0,'star'])
        if mark <= new_antimark and star != 0:
            mark += (star * 100) - new_antimark
            if mark > 0:
                star = mark // 100
                mark -= star * 100
            # star -= 1
            # mark = mark + 100 - new_antimark
        else:
            mark -= new_antimark
        if every_day >= new_antimark:
            every_day -= new_antimark
        else:
            every_day = 0
        if antimark >= 50:
            poo += antimark // 50
            antimark -= 50 * (antimark // 50)
        engine.execute(f"UPDATE user_family SET mark = {mark}, every_day = {every_day}, star = {star},antimark = {antimark}, anti_every_day = {anti_every_day}, poo = {poo} WHERE name = '{name_kid}';")
        update.callback_query.message.delete()
        user(update,context,query.message.text + " " + str(query.data.split('-')[2]) + "üëé")
        kto = ''
        if papa == update.effective_chat.id:
            kto = "–ø–∞–ø—ã"
        elif mama == update.effective_chat.id:
            kto = "–º–∞–º—ã"
        if poo == 0:
            sms = f"+{str(query.data.split('-')[2])}üëé –æ—Ç {kto}\n –í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ = {str(antimark)}"
        else:
            sms = f"+{str(query.data.split('-')[2])}üëé –æ—Ç {kto}\n –í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ = {str(antimark)}\n –í—Å–µ–≥–æ üí© = {str(poo)}"
        logging.info(str(name_kid) + " - " + sms)
        context.bot.send_message(chat_id=int(info.loc[0, 'user_id']), text=sms)
        for i in range(len(recipient)):
            try:
                context.bot.send_message(chat_id=int(recipient.loc[i, 'user_id']), text=str(name_kid) + " - " + sms)
            except Exception:
                logging.error(f"{recipient.loc[i, 'name']} –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º—Å '–æ–± –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.'")

    elif 'mark' in query.data:
        name_kid = str(query.data.split('-')[1])
        info = pd.read_sql_query(f"SELECT mark, every_day, star, user_id FROM user_family WHERE name = '{name_kid}';", engine)
        recipient = pd.read_sql_query(f"SELECT name, user_id FROM user_family WHERE access = '2';", engine)
        mark = int(info.loc[0,'mark'])+int(query.data.split('-')[2])
        every_day = int(info.loc[0,'every_day'])+int(query.data.split('-')[2])
        star = int(info.loc[0,'star'])
        if mark >= 100:
            mark -= 100
            star += 1
        engine.execute(f"UPDATE user_family SET mark = {mark}, every_day = {every_day}, star = {star} WHERE name = '{name_kid}';")
        update.callback_query.message.delete()
        user(update,context,query.message.text + " " + str(query.data.split('-')[2]) + "üëç")
        kto = ''
        if papa == update.effective_chat.id:
            kto = "–ø–∞–ø—ã"
        elif mama == update.effective_chat.id:
            kto = "–º–∞–º—ã"
        if star == 0:
            sms = f"+{str(query.data.split('-')[2])}üëç –æ—Ç {kto}\n –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤ = {str(mark)}"
        else:
            sms = f"+{str(query.data.split('-')[2])}üëç –æ—Ç {kto}\n –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤ = {str(mark)}\n –í—Å–µ–≥–æ –∑–≤—ë–∑–¥‚≠ê = {str(star)}"
        logging.info(str(name_kid) + " - " + sms)
        context.bot.send_message(chat_id=int(info.loc[0,'user_id']),text=sms)
        for i in range(len(recipient)):
            try:
                context.bot.send_message(chat_id=int(recipient.loc[i, 'user_id']), text=str(name_kid) + " - " + sms)
            except Exception:
                logging.error(f"{recipient.loc[i, 'name']} –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º—Å '–æ–± –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.'")

    elif 'IQ' in query.data:
        name_kid = str(query.data.split('-')[1])
        info = pd.read_sql_query(f"SELECT iq, brain, user_id FROM user_family WHERE name = '{name_kid}';", engine)
        recipient = pd.read_sql_query(f"SELECT name, user_id FROM user_family WHERE access = '2';", engine)
        iq = int(info.loc[0,'iq'])+int(query.data.split('-')[2])
        brain = int(info.loc[0,'brain'])
        if iq >= 50:
            iq -= 50
            brain += 1
        engine.execute(f"UPDATE user_family SET iq = {iq}, brain = {brain}, num_day_no_skill = 0 WHERE name = '{name_kid}';")
        update.callback_query.message.delete()
        user(update,context,query.message.text + " " + str(query.data.split('-')[2]) + "üí°")
        kto = ''
        if papa == update.effective_chat.id:
            kto = "–ø–∞–ø—ã"
        elif mama == update.effective_chat.id:
            kto = "–º–∞–º—ã"
        if brain == 0:
            sms = f"+{str(query.data.split('-')[2])}üí° –æ—Ç {kto}\n –í—Å–µ–≥–æ IQ üí° = {str(iq)}"
        else:
            sms = f"+{str(query.data.split('-')[2])}üí° –æ—Ç {kto}\n –í—Å–µ–≥–æ IQ üí° = {str(iq)}\n –í—Å–µ–≥–æ üß† = {str(brain)}"
        logging.info(str(name_kid) + " - " + sms)
        context.bot.send_message(chat_id=int(info.loc[0,'user_id']),text=sms)
        for i in range(len(recipient)):
            try:
                context.bot.send_message(chat_id=int(recipient.loc[i, 'user_id']), text=str(name_kid) + " - " + sms)
            except Exception:
                logging.error(f"{recipient.loc[i, 'name']} –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º—Å '–æ–± –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.'")

    elif 'home' in query.data:
        engine.execute("UPDATE user_family SET answer = 1, comment = 'None' WHERE user_id = '" + str(update.effective_chat.id) +"';")
        logging.info(str(query.data.split('-')[1]) +"–î–æ–º–∞, –û—Ç–ª–∏—á–Ω–æ!üòä")
        query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ!üòä")
        context.bot.send_message(chat_id=papa, text=str(query.data.split('-')[1]) + ", —É–∂–µ –¥–æ–º–∞.")
        context.bot.send_message(chat_id=mama, text=str(query.data.split('-')[1]) + ", —É–∂–µ –¥–æ–º–∞.")
    elif 'add_book' in query.data:
        book_id = query.data.split('-')[1]
        user_triger[update.effective_chat.id] = {
            "triger": "norma_for_new_book",
            "book_id": book_id
        }
        update.callback_query.message.delete()
        context.bot.send_message(chat_id=papa, text=query.message.text +"\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏.")
    elif 'book' in query.data:
        if query.data.split('-')[1] != "0":
            info = pd.read_sql_query(f"SELECT id, name, book_name, all_page, every_day_page, old_page, new_page FROM books WHERE id = {query.data.split('-')[1]};", engine)
            id = info.loc[0, "id"]
            name = info.loc[0, 'name']
            old_page = int(info.loc[0, 'old_page'])
            book = info.loc[0, "book_name"]
            every_day_page = info.loc[0, "every_day_page"]
            all_page = info.loc[0, "all_page"]
            books(update, context, id, name, old_page, book, every_day_page, all_page)
        else:
            user_triger[update.effective_chat.id] = {
                "triger": "add_book",
                "name_book": "None",
                "name_writer": "None",
                "all_page": "None"
            }
            reply_keyboard = [['–û—Ç–º–µ–Ω–∞']]
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–∏–≥–∞?",
                                     reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                                      one_time_keyboard=False))
            logging.info("Going add_book()")
        update.callback_query.message.delete()
    elif 'no_problem' in query.data:
        id_p = str(query.data.split('-')[1])
        engine.execute(f"UPDATE msg_list_work SET make = 1 WHERE id = '{id_p}';")
        query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ, –º–∏–Ω—É—Å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞...")
        logging.info("–û—Ç–ª–∏—á–Ω–æ, –º–∏–Ω—É—Å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞...")
        info = pd.read_sql_query(f"SELECT user_id, msg_text FROM msg_list_work WHERE id = '{id_p}';",engine)
        context.bot.send_message(chat_id=info.loc[0, 'user_id'], text=f"–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞:\n{str(info.loc[0, 'msg_text'])}")
        logging.info(f"–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞:\n{str(info.loc[0, 'msg_text'])}")
    elif 'case' in query.data:
        id = int(query.data.split('-')[1])
        user_id = int(query.data.split('-')[2])
        info = pd.read_sql_query(f"SELECT name_case, repeated_day, repeated_date, num_of_likes, antiduble FROM list_cases WHERE id = '{id}';", engine)
        if info.loc[0,'antiduble'] == 0:
            if str(query.data.split('-')[3]) == "yes":
                repeated_date = datetime.now() + timedelta(days=+int((info.loc[0,"repeated_day"])))
                engine.execute(f"UPDATE list_cases SET repeated_date = '{repeated_date.strftime('%Y-%m-%d 00:00:00')}', name = '0', antiduble = '1', access_denied = 0 WHERE id = '{id}';")
                info_mark = pd.read_sql_query(f"SELECT mark, every_day, star FROM user_family WHERE user_id = '{user_id}';", engine)
                mark = int(info_mark.loc[0, 'mark']) + int(info.loc[0,'num_of_likes'])
                every_day = int(info_mark.loc[0, 'every_day']) + int(info.loc[0,'num_of_likes'])
                star = int(info_mark.loc[0, 'star'])
                if mark >= 100:
                    mark -= 100
                    star += 1
                engine.execute(f"UPDATE user_family SET mark = {mark}, every_day = {every_day}, star = {star} WHERE user_id = '{user_id}';")

                sms = f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ \"{info.loc[0,'name_case']}\" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! +{info.loc[0,'num_of_likes']}üëç"
            else:
                sms = f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ \"{info.loc[0,'name_case']}\" –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ."
            context.bot.send_message(chat_id=mama, text=str(name_kids[user_id])+":\n"+sms)
            context.bot.send_message(chat_id=papa, text=str(name_kids[user_id])+":\n"+sms)
            context.bot.send_message(chat_id=user_id, text=sms)
            logging.info(f"{str(name_kids[user_id])}:\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ \"{info.loc[0,'name_case']}\" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! +{info.loc[0,'num_of_likes']}")
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–î–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        update.callback_query.message.delete()
    elif 'query_for_buy_products' in query.data:
        categories = query.data.split('-')[1]
        products_pd = pd.read_sql_query(f"SELECT name, link,id FROM products WHERE categories = '{categories}';", engine)
        keyboard = []
        if len(products_pd) != 0:
            text = ''
            for i in range(len(products_pd)):
                text += f"{i + 1}) {products_pd.loc[i, 'name']} ({products_pd.loc[i, 'link']})\n"
                keyboard += [[InlineKeyboardButton(f"{i + 1}) {products_pd.loc[i, 'name']}", callback_data='query_for_buy_next-'+str(products_pd.loc[i, 'id']))]]
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=InlineKeyboardMarkup(keyboard))
            user_triger[update.effective_chat.id]={
                'triger': 'None',
                'categories': categories,
                'products_name': "None"
            }
    elif 'query_for_buy_next' in query.data:
        id = query.data.split('-')[1]
        products_pd = pd.read_sql_query(f"SELECT name FROM products WHERE id = '{id}';",engine)
        user_triger[update.effective_chat.id]['triger'] = 'query_for_buy_next'
        user_triger[update.effective_chat.id]['products_name'] = products_pd.loc[0, 'name']
        query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç. –¥–ª—è –∑–∞–∫—É–ø–∫–∏ \"{products_pd.loc[0,'name']}\".")
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥\"",reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥']], resize_keyboard=True,
                                                              one_time_keyboard=False))
        # context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç. –¥–ª—è –∑–∞–∫—É–ø–∫–∏.")
    elif 'dish_choice_categories' in query.data:
        categories_name = query.data.split('-')[1]
        if categories_name != 'back': # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤–æ back, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            products_pd = pd.read_sql_query(f"SELECT id, name FROM products WHERE categories = '{categories_name}';",engine)
            keyboard = []
            for j in range(len(products_pd)):
                keyboard += [[InlineKeyboardButton(products_pd.loc[j, 'name'], callback_data='dish_choice_products-' + str(products_pd.loc[j, 'id']))]]
            keyboard += [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='dish_choice_categories-back')]]
            sms = "–ß—Ç–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞?"
            query.edit_message_text(sms, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            categories = pd.read_sql(f"SELECT * FROM categories;", engine)
            keyboard = []
            for j in range(len(categories)):
                keyboard += [[InlineKeyboardButton(categories.loc[j, 'name'],
                                                   callback_data='dish_choice_categories-' + str(
                                                       categories.loc[j, 'name']))]]
            keyboard += [[InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='dish_saved-begin')]]
            sms = "–ß—Ç–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞?"
            query.edit_message_text(sms, reply_markup=InlineKeyboardMarkup(keyboard))
    elif 'dish_choice_products' in query.data:
        id_products = query.data.split('-')[1]
        user_triger[update.effective_chat.id]['list_products'] += [id_products]
        context.bot.send_message(chat_id=update.effective_chat.id, text='–í —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–∏–ª. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç.')
    elif 'dish_saved' in query.data: # Button "save" —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
        step = query.data.split('-')[1]
        list_name_product = ''
        for id_product in user_triger[update.effective_chat.id]['list_products']:
            info = pd.read_sql(f"SELECT name FROM products WHERE id = '{id_product}';",engine)
            list_name_product += f"‚Ä¢ {str(info.loc[0, 'name'])}\n"
        sms = f"–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {user_triger[update.effective_chat.id]['name']}\n" \
              f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{list_name_product}\n" \
              f"–¢–∞–∫ –∂–µ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {user_triger[update.effective_chat.id]['num_need_people']} —á–µ–ª. –∏ –∑–∞–π–º–µ—Ç —ç—Ç–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {user_triger[update.effective_chat.id]['cooking_time']} "
        if step == 'begin':
            keyboard = [[InlineKeyboardButton("–í—Å–µ –≤–µ—Ä–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.", callback_data='dish_saved-end')]]
            query.edit_message_text(sms, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            update.callback_query.message.delete()
            if update.effective_chat.id in user_triger:
                list_product = str(user_triger[update.effective_chat.id]['list_products']).replace('\'', '').replace('[', '').replace(']', '').replace(' ', '')
                engine.execute(f"INSERT INTO dish(name, list_product, cooking_time, num_need_people) VALUES('{str(user_triger[update.effective_chat.id]['name']).replace('%', '%%')}','{list_product}', '{user_triger[update.effective_chat.id]['cooking_time']}', '{user_triger[update.effective_chat.id]['num_need_people']}');")
                info2 = pd.read_sql(f"SELECT id FROM dish WHERE name = '{user_triger[update.effective_chat.id]['name']}';", engine)
                keyboard = [[InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ª–∞–π–∫–æ–≤.", callback_data='dish_like-'+str(info2.loc[0,'id']))]]
                context.bot.send_message(chat_id=papa, text=sms, reply_markup=InlineKeyboardMarkup(keyboard))
                eat(update, context, user_triger)
    elif 'dish_add' in query.data: # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        id = query.data.split('-')[1]
        dish = pd.read_sql(f"SELECT * FROM dish WHERE id = '{id}';", engine)
        list_products = str(dish.loc[0,'list_product']).split(',')
        user_name = pd.read_sql(f"SELECT name FROM user_family WHERE user_id = '{update.effective_chat.id}';", engine)
        for i in list_products:
            info = pd.read_sql(f"SELECT * FROM products WHERE id = '{i}';", engine)
            shopping_pd = pd.read_sql(f"SELECT * FROM shopping_list WHERE categories = '{info.loc[0,'categories']}' and products = '{str(info.loc[0,'name']).replace('%', '%%')}';",engine)
            if len(shopping_pd) == 0:
                and_name = ''
                quantity = 1
            else:
                and_name = f" –∏ {shopping_pd.loc[0, 'name']}"
                quantity = int(shopping_pd.loc[0, 'quantity']) + 1
            engine.execute(f"INSERT INTO shopping_list(categories, products, quantity, name, order_date) "
                           f"VALUES('{info.loc[0,'categories']}',"
                           f"'{str(info.loc[0,'name']).replace('%', '%%')}',"
                           f"'{quantity}','–¥–ª—è –±–ª—é–¥–∞ \"{dish.loc[0, 'name']}\" - {user_name.loc[0, 'name']}{and_name}',"
                           f"'{str(datetime.now().strftime('%d.%m.%Y'))}');")
        update.callback_query.message.delete()
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    elif 'dish_like' in query.data: #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ—Ç–¥–∞–≤–∞—Ç—å –∑–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
        update.callback_query.message.delete()
        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞.")
        user_triger[update.effective_chat.id] = {
            'triger': 'dish_like',
            'id': query.data.split('-')[1]
        }
    elif 'elections_upgrade' in query.data:
        info2 = pd.read_sql(f"SELECT * FROM user_family ORDER BY elections DESC;", engine)
        sms = ''
        for i in range(len(info2)):
            if info2.loc[i, 'name'] != '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω':
                space = " " * ((10-len(info2.loc[i, 'name']))*2)
                sms += f"{info2.loc[i, 'name']}{space}{info2.loc[i, 'elections']}‚ù§Ô∏è\n"
        keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", callback_data='elections_upgrade')]]
        query.edit_message_text(sms, reply_markup=InlineKeyboardMarkup(keyboard))
    elif 'elections' in query.data:
        id = query.data.split('-')[1]
        info = pd.read_sql(f"SELECT elections FROM user_family WHERE id = {id};", engine)
        engine.execute(f"UPDATE user_family SET elections ='{int(info.loc[0,'elections']) + 1}' WHERE id = '{id}';")  #
        engine.execute(f"UPDATE user_family SET elections_date ='{datetime.now()}' WHERE user_id = '{update.effective_chat.id}';")
        info2 = pd.read_sql(f"SELECT * FROM user_family ORDER BY elections DESC;", engine)
        sms = ''
        for i in range(len(info2)):
            if info2.loc[i,'name'] != '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω':
                space = " " * ((10 - len(info2.loc[i, 'name'])) * 2)
                sms += f"{info2.loc[i,'name']}{space}{info2.loc[i, 'elections']}‚ù§Ô∏è\n"
        keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", callback_data='elections_upgrade')]]
        query.edit_message_text(sms, reply_markup=InlineKeyboardMarkup(keyboard))
        sum_elections = info2['elections'].sum()
        if sum_elections >= 6:
            for i in range(len(info2)):
                context.bot.send_message(chat_id=info2.loc[i,'user_id'],text=f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–ú—ã —Ä–µ—à–∏–ª–∏, —á—Ç–æ {info2.loc[0,'name']}, –æ—Ç–ª–∏—á–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.")
        else:
            list_elections = ''
            for j in range(len(info2)):
                if str(info2.loc[j,'elections_date']).split(' ')[0] == datetime.now().strftime("%Y-%m-%d"):
                    list_elections += f"{info2.loc[j, 'name']}, "
            for i in range(len(info2)):
                if list_elections != '':
                    context.bot.send_message(chat_id=info2.loc[i,'user_id'], text=f"–í –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ: {list_elections[:-2]}")
    elif "institut_like" in query.data:
        update.callback_query.message.delete()
        id_i = query.data.split('-')[1]
        mark = query.data.split('-')[2].replace("m", "-")
        user_triger[update.effective_chat.id] = {
            "triger": "institut",
            "id": id_i,
            "mark": mark
        }
        mark2 = "‚≠êÔ∏è"
        if '-' in mark:
            mark2 = "üëé"
        context.bot.send_message(chat_id=update.effective_chat.id, text = f"–¢–µ–ø—Ä—å –ø—Ä–æ–∫–æ–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ {mark}{mark2}?")
    elif "institut" in query.data:
        if 'comments' == query.data.split('-')[1]:
            sms = ''
            for name in data['name_institut']:
                text = ''
                sum = 0
                info = pd.read_sql(f"SELECT * FROM institut WHERE name = '{name}';", engine)
                for i in range(len(info)):
                    mark2 = "‚≠êÔ∏è"
                    if '-' in str(info.loc[i,'mark']):
                        mark2 = "üëé"
                    text += f"{i+1}) {info.loc[i,'who']} ({info.loc[i,'name']} {abs(info.loc[i,'mark'])}{mark2}) - {info.loc[i,'comment']}\n"
                    sum += int(info.loc[i,'mark'])
                if text != '':
                    if sum < 0:
                        mark3 = "üëé"
                    elif sum == 0:
                        mark3 = ""
                    elif sum > 0:
                        mark3 = "‚≠êÔ∏è"
                    sms += f"üéì {name} –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ {abs(sum)}{mark3}:\n{text}\n"
            context.bot.send_message(chat_id=update.effective_chat.id, text=sms)
        elif 'statistik' == query.data.split('-')[1]:
            sms = ''
            for name in data['name_institut']:
                sum = 0
                info = pd.read_sql(f"SELECT * FROM institut WHERE name = '{name}';", engine)
                for i in range(len(info)):
                    sum += int(info.loc[i,'mark'])
                if sum != 0:
                    if sum < 0:
                        mark3 = "üëé"
                    elif sum > 0:
                        mark3 = "‚≠êÔ∏è"
                    sms += f"üéì {name} –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ {abs(sum)}{mark3}:\n"
            context.bot.send_message(chat_id=update.effective_chat.id, text=sms)
        else:
            button = [[InlineKeyboardButton("1‚≠êÔ∏è", callback_data=f"institut_like-{query.data.split('-')[1]}-1"),
                      InlineKeyboardButton("2‚≠êÔ∏è", callback_data=f"institut_like-{query.data.split('-')[1]}-2"),
                      InlineKeyboardButton("3‚≠êÔ∏è", callback_data=f"institut_like-{query.data.split('-')[1]}-3"),
                      InlineKeyboardButton("4‚≠êÔ∏è", callback_data=f"institut_like-{query.data.split('-')[1]}-4"),
                      InlineKeyboardButton("5‚≠êÔ∏è", callback_data=f"institut_like-{query.data.split('-')[1]}-5")],
                      [InlineKeyboardButton("1üëé", callback_data=f"institut_like-{query.data.split('-')[1]}-m1"),
                       InlineKeyboardButton("2üëé", callback_data=f"institut_like-{query.data.split('-')[1]}-m2"),
                       InlineKeyboardButton("3üëé", callback_data=f"institut_like-{query.data.split('-')[1]}-m3"),
                       InlineKeyboardButton("4üëé", callback_data=f"institut_like-{query.data.split('-')[1]}-m4"),
                       InlineKeyboardButton("5üëé", callback_data=f"institut_like-{query.data.split('-')[1]}-m5")]]
            context.bot.send_message(chat_id=update.effective_chat.id, text='–û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç –ø–æ –ø—è—Ç–∏–∑–≤–µ–∑–¥–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.',
                                     reply_markup=InlineKeyboardMarkup(button))
    elif "call" == query.data:
        name = name_kids[update.effective_chat.id]
        engine.execute(f"INSERT INTO answer(date, name, answer_kids) VALUES('{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}','{name}','–î–∞, –ø–æ–∑–≤–æ–Ω–∏–ª(–∞)');")
        query.edit_message_text("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ üòä")

def Timer(update, context,sec):
    time.sleep(sec)
    if update.effective_chat.id in user_triger:
        user_triger.pop(update.effective_chat.id)
def Timer_status(update, context,sec,msg_id):
    time.sleep(sec)
    try:
        context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
    except Exception:
        logging.info("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º")

def statistics(update, context):
    ########### –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ####################
    statistic = {}
    info = pd.read_sql(f"SELECT name, mark, antimark, star, poo, iq, brain, books_end FROM user_family WHERE access = 0;", engine)
    for i in range(len(info)):
        #–°—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –ë–î –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏—Ö –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        like = int(info.loc[i, "mark"])
        star = int(info.loc[i, "star"])
        dislike = int(info.loc[i, "antimark"])
        poo = int(info.loc[i, "poo"])
        iq = int(info.loc[i, "iq"])
        brain = int(info.loc[i, "brain"])
        books_end_next = int(info.loc[i, "books_end"])//5
        books_end = int(info.loc[i, "books_end"]) - (books_end_next * 5)
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–µ —á–∏—Å–ª—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        sms_like = "üëç" * like
        sms_star = "‚≠ê" * star
        sms_dislike = "üëé" * dislike
        sms_poo = "üí©" * poo
        sms_iq = "üí°" * iq
        sms_brain = "üß†" * brain
        sms_books_end = "üìï" * books_end
        sms_books_end_next = "üéì" * books_end_next
    ###########################################################
    ###########################################################
        # —Å–æ–æ—Ç–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∞–π–∫–∞–º–∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç => —É –∫–æ–≥–æ –±–æ–ª—å—à–µ —Ç–æ—Ç –∏ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ.
        result = (like+(star*100))+((brain*25)+(iq/2))
        statistic[info.loc[i, "name"]] = {
            "like": str(like) + sms_like,
            "dislike": str(dislike) + sms_dislike,
            "result": result,
            "star": str(star) + sms_star,
            "poo": str(poo) + sms_poo,
            "iq": str(iq) + sms_iq,
            "brain": str(brain) + sms_brain,
            "books_end": str(books_end) + sms_books_end,
            "books_end_next": str(books_end_next) + sms_books_end_next,
            "place": 0
        }
    ########### –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ####################
    ########### –í—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Ä–∞—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–∞–º ####################
    k = 0
    for j in range(len(info)):
        xyz = []
        for i in range(len(info)):
            if statistic[info.loc[i, "name"]]["place"] == 0:
                xyz += [[statistic[info.loc[i, "name"]]["result"], info.loc[i, "name"]]]
        k += 1
        statistic[max(xyz)[1]]["place"] = k
    ########### –í—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Ä–∞—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—Ç–∞–º ####################
    ########### –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ####################
    place1 = ""
    place2 = ""
    place3 = ""
    place4 = ""
    for i in range(len(info)):
        if statistic[info.loc[i, "name"]]["place"] == 1:
            place1 = f"ü•á üëë{str(info.loc[i, 'name'])}üëë\n{str(statistic[info.loc[i, 'name']]['like'])}"
            if str(statistic[info.loc[i, 'name']]['dislike']) != "0":
                place1 += "\n" +str(statistic[info.loc[i, 'name']]['dislike'])
            if str(statistic[info.loc[i, 'name']]['star']) != "0":
                place1 += "\n" + str(statistic[info.loc[i, 'name']]['star'])
            if str(statistic[info.loc[i, 'name']]['poo']) != "0":
                place1 += "\n" + str(statistic[info.loc[i, 'name']]['poo'])
            if str(statistic[info.loc[i, 'name']]['iq']) != "0":
                place1 += "\n" + str(statistic[info.loc[i, 'name']]['iq'])
            if str(statistic[info.loc[i, 'name']]['brain']) != "0":
                place1 += "\n" + str(statistic[info.loc[i, 'name']]['brain'])
            if str(statistic[info.loc[i, 'name']]['books_end']) != "0":
                place1 += "\n" + str(statistic[info.loc[i, 'name']]['books_end'])
            if str(statistic[info.loc[i, 'name']]['books_end_next']) != "0":
                place1 += "\n" + str(statistic[info.loc[i, 'name']]['books_end_next'])
        elif statistic[info.loc[i, "name"]]["place"] == 2:
            place2 = f"ü•à {str(info.loc[i, 'name'])}\n{str(statistic[info.loc[i, 'name']]['like'])}"
            if str(statistic[info.loc[i, 'name']]['dislike']) != "0":
                place2 += "\n" + str(statistic[info.loc[i, 'name']]['dislike'])
            if str(statistic[info.loc[i, 'name']]['star']) != "0":
                place2 += "\n" + str(statistic[info.loc[i, 'name']]['star'])
            if str(statistic[info.loc[i, 'name']]['poo']) != "0":
                place2 += "\n" + str(statistic[info.loc[i, 'name']]['poo'])
            if str(statistic[info.loc[i, 'name']]['iq']) != "0":
                place2 += "\n" + str(statistic[info.loc[i, 'name']]['iq'])
            if str(statistic[info.loc[i, 'name']]['brain']) != "0":
                place2 += "\n" + str(statistic[info.loc[i, 'name']]['brain'])
            if str(statistic[info.loc[i, 'name']]['books_end']) != "0":
                place2 += "\n" + str(statistic[info.loc[i, 'name']]['books_end'])
            if str(statistic[info.loc[i, 'name']]['books_end_next']) != "0":
                place2 += "\n" + str(statistic[info.loc[i, 'name']]['books_end_next'])
        elif statistic[info.loc[i, "name"]]["place"] == 3:
            place3 = f"ü•â {str(info.loc[i, 'name'])}\n{str(statistic[info.loc[i, 'name']]['like'])}"
            if str(statistic[info.loc[i, 'name']]['dislike']) != "0":
                place3 += "\n" + str(statistic[info.loc[i, 'name']]['dislike'])
            if str(statistic[info.loc[i, 'name']]['star']) != "0":
                place3 += "\n" + str(statistic[info.loc[i, 'name']]['star'])
            if str(statistic[info.loc[i, 'name']]['poo']) != "0":
                place3 += "\n" + str(statistic[info.loc[i, 'name']]['poo'])
            if str(statistic[info.loc[i, 'name']]['iq']) != "0":
                place3 += "\n" + str(statistic[info.loc[i, 'name']]['iq'])
            if str(statistic[info.loc[i, 'name']]['brain']) != "0":
                place3 += "\n" + str(statistic[info.loc[i, 'name']]['brain'])
            if str(statistic[info.loc[i, 'name']]['books_end']) != "0":
                place3 += "\n" + str(statistic[info.loc[i, 'name']]['books_end'])
            if str(statistic[info.loc[i, 'name']]['books_end_next']) != "0":
                place3 += "\n" + str(statistic[info.loc[i, 'name']]['books_end_next'])
        elif statistic[info.loc[i, "name"]]["place"] == 4:
            place4 = f"{str(info.loc[i, 'name'])}\n{str(statistic[info.loc[i, 'name']]['like'])}"
            if str(statistic[info.loc[i, 'name']]['dislike']) != "0":
                place4 += "\n" + str(statistic[info.loc[i, 'name']]['dislike'])
            if str(statistic[info.loc[i, 'name']]['star']) != "0":
                place4 += "\n" + str(statistic[info.loc[i, 'name']]['star'])
            if str(statistic[info.loc[i, 'name']]['poo']) != "0":
                place4 += "\n" + str(statistic[info.loc[i, 'name']]['poo'])
            if str(statistic[info.loc[i, 'name']]['iq']) != "0":
                place4 += "\n" + str(statistic[info.loc[i, 'name']]['iq'])
            if str(statistic[info.loc[i, 'name']]['brain']) != "0":
                place4 += "\n" + str(statistic[info.loc[i, 'name']]['brain'])
            if str(statistic[info.loc[i, 'name']]['books_end']) != "0":
                place4 += "\n" + str(statistic[info.loc[i, 'name']]['books_end'])
            if str(statistic[info.loc[i, 'name']]['books_end_next']) != "0":
                place4 += "\n" + str(statistic[info.loc[i, 'name']]['books_end_next'])
    message = place1 + "\n\n" + place2 + "\n\n" + place3 + "\n\n" + place4
    context.bot.send_message(chat_id=update.effective_chat.id,text=message)
    Thread(target=Timer_status, args=(update, context, 60, update.message.message_id+1)).start()

def statistics_like_year(update, context):
    ########### –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ####################
    month_name = {
        "1": "–Ø–Ω–≤–∞—Ä—å",
        "2": "–§–µ–≤—Ä–∞–ª—å",
        "3": "–ú–∞—Ä—Ç",
        "4": "–ê–ø—Ä–µ–ª—å",
        "5": "–ú–∞–π",
        "6": "–ò—é–Ω—å",
        "7": "–ò—é–ª—å",
        "8": "–ê–≤–≥—É—Å—Ç",
        "9": "–°–µ–Ω—Ç—è–±—Ä—å",
        "10": "–û–∫—Ç—è–±—Ä—å",
        "11": "–ù–æ—è–±—Ä—å",
        "12": "–î–µ–∫–∞–±—Ä—å"
    }
    message = ''
    info = pd.read_sql(f"SELECT name, month, star, poo, brain, place, books_end FROM statistics WHERE year = '{datetime.now().year}';", engine)
    if len(info) == 0: # –ü–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥, –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∑–∞ —Ç–æ—Ç. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–µ–≤—Ä–∞–ª–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —è–Ω–≤–∞—Ä—å
        info = pd.read_sql(f"SELECT name, month, star, poo, brain, place, books_end FROM statistics WHERE year = '{int(datetime.now().year) - 1}';", engine)
    for j in range(12, 0,-1):
        text = ''
        place1 = ''
        place2 = ''
        place3 = ''
        place4 = ''
        for i in range(len(info)):
            if int(info.loc[i,"month"]) == j:
                if str(info.loc[i, 'books_end']) != "0":
                    books_end_next = int(info.loc[i, "books_end"]) // 5
                    books_end = int(info.loc[i, "books_end"]) - (books_end_next * 5)
                else:
                    books_end_next = 0
                    books_end = 0
                if int(info.loc[i, "place"]) == 1:
                    place1 = f"ü•á{info.loc[i, 'name']} -"
                    if str(info.loc[i, 'star']) != "0":
                        place1 += f" {info.loc[i, 'star']}‚≠ê"
                    if str(info.loc[i, 'poo']) != "0":
                        place1 += f" {info.loc[i, 'poo']}üí©"
                    if str(info.loc[i, 'brain']) != "0":
                        place1 += f" {info.loc[i, 'brain']}üß†"
                    if str(books_end) != "0":
                        place1 += f" {books_end}üìï"
                    if str(books_end_next) != "0":
                        place1 += f" {books_end_next}üéì"
                elif int(info.loc[i, "place"]) == 2:
                    place2 = f"ü•à{info.loc[i, 'name']} -"
                    if str(info.loc[i, 'star']) != "0":
                        place2 += f" {info.loc[i, 'star']}‚≠ê"
                    if str(info.loc[i, 'poo']) != "0":
                        place2 += f" {info.loc[i, 'poo']}üí©"
                    if str(info.loc[i, 'brain']) != "0":
                        place2 += f" {info.loc[i, 'brain']}üß†"
                    if str(books_end) != "0":
                        place2 += f" {books_end}üìï"
                    if str(books_end_next) != "0":
                        place2 += f" {books_end_next}üéì"
                elif int(info.loc[i, "place"]) == 3:
                    place3 = f"ü•â{info.loc[i, 'name']} -"
                    if str(info.loc[i, 'star']) != "0":
                        place3 += f" {info.loc[i, 'star']}‚≠ê"
                    if str(info.loc[i, 'poo']) != "0":
                        place3 += f" {info.loc[i, 'poo']}üí©"
                    if str(info.loc[i, 'brain']) != "0":
                        place3 += f" {info.loc[i, 'brain']}üß†"
                    if str(books_end) != "0":
                        place3 += f" {books_end}üìï"
                    if str(books_end_next) != "0":
                        place3 += f" {books_end_next}üéì"
                elif int(info.loc[i, "place"]) == 4:
                    place4 = f"üéó{info.loc[i, 'name']} -"
                    if str(info.loc[i, 'star']) != "0":
                        place4 += f" {info.loc[i, 'star']}‚≠ê"
                    if str(info.loc[i, 'poo']) != "0":
                        place4 += f" {info.loc[i, 'poo']}üí©"
                    if str(info.loc[i, 'brain']) != "0":
                        place4 += f" {info.loc[i, 'brain']}üß†"
                    if str(books_end) != "0":
                        place4 += f" {books_end}üìï"
                    if str(books_end_next) != "0":
                        place4 += f" {books_end_next}üéì"
                text = f"{place1}\n{place2}\n{place3}\n{place4}"
        if text != '':
            message += f"{month_name[str(j)]}:\n{text}\n"
    if message != '':
        context.bot.send_message(chat_id=update.effective_chat.id,text=message)
        Thread(target=Timer_status, args=(update, context, 60, update.message.message_id+1)).start()

def fine_books(update, context):
    info = pd.read_sql_query(f"SELECT id, name, writer, book_name, all_page, every_day_page, old_page, new_page FROM books WHERE user_id = {update.effective_chat.id};", engine)
    if len(info) >= 1:
    #     id = info.loc[0, "id"]
    #     name = info.loc[0, 'name']
    #     old_page = int(info.loc[0, 'old_page'])
    #     book = info.loc[0, "book_name"] + "(" + info.loc[0, "writer"] + ")"
    #     every_day_page = info.loc[0, "every_day_page"]
    #     all_page = info.loc[0, "all_page"]
    #     books(update, context, id, name, old_page, book, every_day_page, all_page)
    # elif len(info) > 1:
        keyboard = []
        for i in range(len(info)):
            keyboard += [[InlineKeyboardButton('–ö–Ω–∏–≥–∞ "' + info.loc[i, "book_name"] + '"', callback_data='book-' + str(info.loc[i, "id"]))]]
        keyboard += [[InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É', callback_data='book-0')]]
        context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        keyboard = [[InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É', callback_data='book-0')]]
        context.bot.send_message(chat_id=update.effective_chat.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç –∫–Ω–∏–≥, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
                                 reply_markup=InlineKeyboardMarkup(keyboard))

def books(update, context, id, name, old_page, book, every_day_page, all_page):
    page = ''
    if name == "–í–æ–≤–∞":
        read = "–ø—Ä–æ—á–∏—Ç–∞–ª"
        stop = "–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è"
    else:
        read = "–ø—Ä–æ—á–∏—Ç–∞–ª–∞"
        stop = "–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å"
    old_page_text = old_page
    if old_page > 20:
        old_page = int(str(old_page)[len(str(old_page)) - 1:])
    if old_page == 0 or (old_page >= 5 and old_page <= 20):
        page = "—Å—Ç—Ä–∞–Ω–∏—Ü"
    elif old_page >= 2 and old_page <= 4:
        page = "—Å—Ç—Ä–∞–Ω–∏—Ü—ã"
    elif old_page == 1:
        page = "—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    reply_keyboard = [['–û—Ç–º–µ–Ω–∞']]
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ö–Ω–∏–≥–∞ \"{book}\", –ø–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º, —Ç—ã {read} {old_page_text} {page}. –ï—Å–ª–∏ —Å —Ç–µ—Ö –ø–æ—Ä —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã {stop}.",reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,one_time_keyboard=False))
    user_triger[update.effective_chat.id] ={
        "triger": "book",
        "id": id,
        "book": book,
        "old_page": old_page_text,
        "all_page": all_page,
        "every_day_page": every_day_page
    }
def time_yes(update, context):
    info = pd.read_sql_query(f"SELECT date, name,answer_kids FROM answer WHERE date > '{(datetime.now() - timedelta(weeks=+2)).strftime('%Y-%m-%d %H:%M:%S')}' AND answer_kids = '–î–∞' ORDER BY date ASC;",engine)
    sms = ''
    if len(info) != 0:
        for i in range(len(info)):
            sms += f"{info.loc[i,'date'].strftime('%d.%m.%y %H:%M')} - {info.loc[i,'name']} –æ—Ç–≤–µ—Ç \"{info.loc[i,'answer_kids']}\"\n"
    else:
        sms = "–°–µ–≥–æ–¥–Ω—è –æ—Ç–≤–µ—Ç–æ–≤ \"–î–∞\" –Ω–µ –±—ã–ª–æ."
    context.bot.send_message(chat_id=update.effective_chat.id, text = sms)

def handle_text(update, context):
    if update.effective_chat.id in user_triger:
        if user_triger[update.effective_chat.id]["triger"] == 'token':
            num = user_triger[943180118]["num"]
            flow = user_triger[943180118]["flow"]
            print(update.message.text)
            credentials = flow.run_console_code(update.message.text)
            pickle.dump(credentials, open(f"{working_folder}calendar_tokens/token_{data_kids[kids[num]]}.pkl", "wb"))
            print(num)
            if num < 4:
                num += 1
                print(num)
                token_download(update, context, num)
            else:
                user_triger.pop(943180118)
                context.bot.send_message(chat_id=943180118, text="–≥–æ—Ç–æ–≤–æ. –¢–æ–∫–µ–Ω—ã –∑–∞–º–µ–Ω–µ–Ω—ã.")
        elif user_triger[update.effective_chat.id]["triger"] == 'institut':
            engine.execute(f"INSERT INTO institut (name, mark, who, comment) VALUES('{data['name_institut'][int(user_triger[update.effective_chat.id]['id'])]}', '{user_triger[update.effective_chat.id]['mark']}', '{data[update.effective_chat.id]}', '{update.message.text}');")
            user_triger.pop(update.effective_chat.id)
            context.bot.send_message(chat_id=update.effective_chat.id, text="–û—Ç–ª–∏—á–Ω–æ. –Ø –∑–∞–ø–∏—Å–∞–ª!")
        else:
            triger(update, context, user_triger, engine, start, user, logging, name_kids, papa, mama)
    else:
        search_result = engine.execute(f"SELECT name,access FROM user_family WHERE user_id = '{str(update.effective_chat.id)}' AND access in ('1', '2');").fetchall()
        if "–∫–Ω–∏–≥–∏" == update.message.text.lower():
            fine_books(update, context)
        elif "–∏–Ω—Å—Ç–∏—Ç—É—Ç" == update.message.text.lower():
            button = []
            button2 = []
            for i in range(len(data['name_institut'])):
                button += [[InlineKeyboardButton(data['name_institut'][i], url=data['link_institut'][i])]]
                button2 += [[InlineKeyboardButton(data['name_institut'][i], callback_data=f"institut-{i}")]]
            button2 += [[InlineKeyboardButton("üìñ–ü–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏üìö", callback_data=f"institut-comments")],[InlineKeyboardButton("üìñ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìö", callback_data=f"institut-statistik")]]
            context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è:',
                                        reply_markup=InlineKeyboardMarkup(button))
            context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É.',
                                     reply_markup=InlineKeyboardMarkup(button2))
        elif "–ø—Ä–æ–±–ª–µ–º—ã" == update.message.text.lower():
            reply_keyboard = [['–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º','–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—É'],['–û—Ç–º–µ–Ω–∏—Ç—å']]
            sms = '–í—ã–±–µ—Ä–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å "C–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º" –∏–ª–∏ "–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—É"'
            context.bot.send_message(chat_id=update.effective_chat.id, text=sms, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False))
        elif "—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º" == update.message.text.lower():
            context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            sms = ''
            info = pd.read_sql_query("SELECT id, name, msg_text, date FROM msg_list_work WHERE make = 0 ORDER BY date ASC;", engine)  #
            if len(info) != 0:
                for i in range(len(info)):
                    sms += str(info.loc[i, 'date'].strftime('%d.%m.%Y %H:%M')) + " " + str(info.loc[i, 'name']) + ' –ø—Ä–æ–±–ª–µ–º–∞ ‚Ññ'+ str(info.loc[i, 'id']) +':\n"' + str(info.loc[i, 'msg_text']) + '"\n\n'
                context.bot.send_message(chat_id=update.effective_chat.id, text=sms)
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç!")
        elif "–∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—É" == update.message.text.lower():
            try:
                keyboard = []
                info = pd.read_sql("SELECT id, name, msg_text, date FROM msg_list_work WHERE make = 0 ORDER BY date ASC;", engine)
                for i in range(len(info)):
                    keyboard += [[InlineKeyboardButton(f"–ü—Ä–æ–±–ª–µ–º–∞ ‚Ññ{str(info.loc[i, 'id'])}", callback_data='no_problem-' + str(info.loc[i, 'id']))]]
                context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å:', reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as err:
                logging.error('Error:' + str(err))
        elif "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥" == update.message.text.lower():
            statistics_like_year(update,context)
        elif "–µ–¥–∞" == update.message.text.lower():
            eat(update, context, user_triger)
        elif "–ø—Ä–æ–¥—É–∫—Ç" == update.message.text.lower():
            products(update, context, user_triger)
        elif "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏" == update.message.text.lower():
            categories(update, context, user_triger)
        elif "—á–∞—Å—Ç–æ—Ç–∞" == update.message.text.lower():
            frequency(update, context, user_triger)
        elif "–±–ª—é–¥–æ" == update.message.text.lower():
            dish(update, context, user_triger)
            info = pd.read_sql("SELECT name FROM dish;", engine)
            if len(info) != 0:
                text = ''
                for i in range(len(info)):
                    text += f'{i + 1}) {info.loc[i, "name"]}\n'
                context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        elif '–æ—Ç–º–µ–Ω–∏—Ç—å' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∞' == update.message.text.lower() or '–æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥' == update.message.text.lower()\
                or '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' == update.message.text.lower() or '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–µ–¥–∞"' == update.message.text.lower():
            if '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' == update.message.text.lower():
                sms = '—Ö–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å.'
                user(update, context, sms)
            elif '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é "–µ–¥–∞"' == update.message.text.lower():
                eat(update, context, user_triger)
            else:
                sms = '—Ö–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∞.'
                user(update, context, sms)

###########################################################################################################################
#######################################    –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π    ###############################################################
###########################################################################################################################
        elif len(search_result) != 0: # –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            parents(update, context, user_triger, engine, statistics, Timer_status, kids, data_kids)
###########################################################################################################################
#######################################    –î–ª—è –¥–µ—Ç–µ–π    ###################################################################
###########################################################################################################################
        elif len(search_result) == 0:# –î–ª—è –¥–µ—Ç–µ–π
            children(update, context, user_triger, engine, statistics, name_kids, data_kids)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.")
####################################################
############# –û–±—å—è–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ################
####################################################

start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

time_yes_handler = CommandHandler('time_yes', time_yes)
dispatcher.add_handler(time_yes_handler)

mega_msg_handler = CommandHandler('mega_msg', mega_msg)
dispatcher.add_handler(mega_msg_handler)
#
token_handler = CommandHandler('token', token_download)
dispatcher.add_handler(token_handler)

text_handler = MessageHandler(Filters.text, handle_text)
dispatcher.add_handler(text_handler)

dispatcher.add_handler(CallbackQueryHandler(button))

####################################################
############# –û–±—å—è–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ################
####################################################

updater.start_polling()